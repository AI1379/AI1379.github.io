<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Listener 1379&#39;s Blog</title>
  
  <subtitle>Listener1379&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.listener1379.top/"/>
  <updated>2021-07-29T12:01:49.472Z</updated>
  <id>http://www.listener1379.top/</id>
  
  <author>
    <name>Listener1379</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图论-最短路</title>
    <link href="http://www.listener1379.top/Algorithm/Shortest-Path/sp-algorithm/"/>
    <id>http://www.listener1379.top/Algorithm/Shortest-Path/sp-algorithm/</id>
    <published>2021-07-29T11:31:53.000Z</published>
    <updated>2021-07-29T12:01:49.472Z</updated>
    
    <content type="html"><![CDATA[<p>最短路算法是图论中最基本的算法之一，分为单源最短路径和多源最短路径，其中有许多十分重要（且优秀）的算法，如Dijkstra、Bellman-Ford等，也蕴含了很多算法思想。这些算法不仅在信息学竞赛中常用，在实际开发中也常有用到。</p><span id="more"></span><h1 id="单源最短路"><a href="#单源最短路" class="headerlink" title="单源最短路"></a>单源最短路</h1><p>单源最短路指的是只有一个源点的最短路</p><h2 id="无权图的最短路"><a href="#无权图的最短路" class="headerlink" title="无权图的最短路"></a>无权图的最短路</h2><p>这类问题很好解决：直接从源点开始跑一遍BFS即可解决。</p><p>时间复杂度$O(n)$</p><h2 id="有向无环图（DAG）的最短路"><a href="#有向无环图（DAG）的最短路" class="headerlink" title="有向无环图（DAG）的最短路"></a>有向无环图（DAG）的最短路</h2><p>有向无环图的最短路同样存在线性最短路算法，需要用到<strong>拓扑排序</strong>与<strong>动态规划</strong></p><blockquote><p><strong>为什么DAG可以用动态规划求解最短路？</strong></p><p>首先进行动态规划有一个要求是这个问题具有<strong>无后效性</strong>，简而言之就是后面的决策不会影响前面的结果，解决问题的时候不在乎前面的答案是如何得来的</p><p>在DAG中由于没有环的存在 后面节点的解可以直接由前面节点推得 而如果出现了环则还要考虑环的影响 不再具有无后效性。</p><p>因为DAG的这个性质使得它具有很多优秀性质（可以进行DP），因此有些时候通过一些手段把一般的有向图转化为DAG有利于解决问题，这个转化是通过寻找<strong>强连通分量</strong>然后把每个分量看成一个点实现的。</p><p>无向图因为可以在一条边上无限的来回，因此不存在无环的无向图。</p></blockquote><p>既然是动态规划，不可避免地会有一个状态转移方程。对于DAG的最短路问题，它的转移方程如下：</p><script type="math/tex; mode=display">dis_v=\min\{dis_u+w_{u,v}\}</script><p>也就是说 我们在拓扑排序的同时扫描一个点$u$连出去的所有点$v$，如果$dis_v$也就是$v$这个点当前的最短路大于从$u$到$v$的路径长度，那么我们就更新$dis_v$。这个操作被称作<strong>松弛</strong>，在后面的Bellman-Ford和Dijkstra中也具有重要的地位。</p><p>那么代码写起来就很简单了：写一个普通的拓扑排序，并在同时进行动态规划更新$dis$数组。代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">5010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXM <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>graph<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>weight<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> deg<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span>    deg<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    weight<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      deg<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>deg<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      dis<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="队列优化的Bellman-Ford（SPFA）"><a href="#队列优化的Bellman-Ford（SPFA）" class="headerlink" title="队列优化的Bellman-Ford（SPFA）"></a>队列优化的Bellman-Ford（SPFA）</h2><blockquote><p>在很多地方这个算法被称作SPFA但是其实这个名字只有国内常用 他的通称是队列优化的Bellman-Ford算法</p></blockquote> <div class="note note-danger">            <p>在NOI 2018出现了数据卡SPFA，因此在比赛中慎用</p>          </div><p>大多数情况SPFA跑的很快，但是它不够稳定，最坏情况复杂度达到了$O(nm)$，因此在没有负权边的情况下建议还是使用Dijkstra</p><p>SPFA写起来和BFS有些相似（但是本质不一样）</p><p>Bellman-Ford算法的核心就是不断松弛每一条边直到有一轮没有一次松弛成功。显然，有很多很多的松弛操作本来是没有必要的：只有上一次松弛所连接的边才可能引起进一步的松弛。因此我们可以用队列来维护“哪些节点可以进行松弛”，松弛完后如果不在队列中就将它加入队列，于是就能大幅度减少没有必要的松弛操作，达到优化的目的。</p><p>细节见代码。</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXM <span class="token operator">=</span> <span class="token number">500010</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>graph<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>weight<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>  vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> to <span class="token operator">=</span> graph<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dis<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>          vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span>    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    weight<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">spfa</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>接下来是重头戏Dijkstra。</p><p><strong>注意这个算法只能用于非负权图，但它的速度非常非常快。</strong></p><p>暴力：$O(n^2)$​</p><p>优先队列：$O(m\log m)$​（因为优先队列没法直接修改堆中的内容因此只能在松弛时将松弛后的边push到优先队列里导致时间复杂度变高）​</p><p>手写堆：$O(m\log n)$</p><p>线段树：$O(m\log n)$（其实是用线段树解决RMQ问题实现加速）</p><p>斐波那契堆：$O(n\log n+m)$</p><p>在信息竞赛中最常用的还是优先队列优化的版本，因为它已经足以应对信息竞赛中所需要的时间复杂度了，并且写起来并不复杂。</p><p>Bellman-Ford更加关心边，而Dijkstra则更加关心点。</p><p>Dijkstra同样是基于松弛的算法。我们有两个集合$S$和$Q$，其中$S$中的都是确定了最短路的点，而$Q$中则是没有确定的。初始情况下$S$中只有源点$s$。此后对于$S$中的每一个点$u$，找到它连出去的一个点$v$使得$v\in Q$且$(u,v)$的权值最小，松弛之后把$v$加入$S$。显然，只有新加入$S$的点才有可能进一步扩展出新的点。</p><p>对于Dijkstra的所有优化几乎都集中在取权值最小的边。这就是堆优化Dijkstra的思路。</p><p>堆优代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXM <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> id<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>node<span class="token operator">></span> graph<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>w <span class="token operator">></span> b<span class="token punctuation">.</span>w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  priority_queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  node head<span class="token punctuation">;</span>  <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    head <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    from <span class="token operator">=</span> head<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">&lt;</span> head<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 注意判重</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      weight <span class="token operator">=</span> graph<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>      to <span class="token operator">=</span> graph<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dis<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>to<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span>    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>y<span class="token punctuation">,</span> z<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">dijkstra</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="全源最短路"><a href="#全源最短路" class="headerlink" title="全源最短路"></a>全源最短路</h1><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><p>这个算法十分暴力，是一个DP算法。常数很小，实现很简单，但是时间复杂度非常高。当点数在300以下时可以冒险使用。</p><p>状态转移方程：</p><script type="math/tex; mode=display">dis_{u,v}=\min\{dis_{u,k}+dis_{k,v}\}</script><p>它的思想很简单：选取一个中间点$k$，那么$u$到$v$的最短路必然经过某一个$k$，那么只要枚举$k$就可以求得每一对$u,v$之间的最短路。</p><p>时间复杂度$O(n^3)$</p><p>Floyd通常用邻接矩阵实现（毕竟已经立方阶的复杂度了……）</p><p>注意的是枚举的时候$k$​​的循环要在最外面。dis数组初始时就是邻接矩阵。</p><p>核心代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Johnson"><a href="#Johnson" class="headerlink" title="Johnson"></a>Johnson</h2><p>全源最短路有一个十分容易想到的算法：对于每一个点跑一边Dijkstra / SPFA。但是Dijkstra无法处理负权边，SPFA又不稳定。有一个想法是每条边都加上一个值使得负权边变成正权边，但是这会改变最终的最短路，使得答案不正确。</p><blockquote><p><strong>为什么每条边同时加上一个值会使得最短路改变？</strong></p><p>假设每条边的权值加上了k，那么对于包含了两条边的路径，总的权值加上了2k，而对于包含了三条边的路径总权值则增加了3k，以此类推。这就导致了最短路结果的变化。</p></blockquote><p>Johnson算法结合了Bellman-Ford和Dijkstra算法。首先添加了一个虚拟点标记为0，从这个点向每个点连一条权值为0的边，从这个点开始跑Bellman-Ford，记此时每个点$v$​​​的最短路是 $h_{v}$​​ ，然后更新每条边的边权：</p><script type="math/tex; mode=display">w_{u,v}=w_{u,v}+h_u-h_v</script><p>这个时候每条边的长度都是正的。然后从每个点开始跑Dijkstra得到全源最短路。需要注意的是这个时候的$dis’<em>{u,v}$​​​并不是原图的$dis</em>{u,v}$​​​，而是$dis_{u,v}+h_u-h_v$​​​，因此需要最后减去 $h_u-h_v$​​​​​​​​​​得到最终的答案。</p><p>代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">3010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXM <span class="token operator">=</span> <span class="token number">6010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> id<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>w <span class="token operator">></span> b<span class="token punctuation">.</span>w<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>node<span class="token operator">></span> graph<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cnt<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>  vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//存在负环</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> to <span class="token operator">=</span> graph<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>          vis<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  priority_queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  node head<span class="token punctuation">;</span>  <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    head <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    from <span class="token operator">=</span> head<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">&lt;</span> head<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      weight <span class="token operator">=</span> graph<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>      to <span class="token operator">=</span> graph<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>to<span class="token punctuation">,</span> dis<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>  cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span>    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token punctuation">,</span> z<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">+</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dijkstra</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"INF "</span><span class="token punctuation">;</span> <span class="token comment">// 没有路径</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最短路算法是图论中最基本的算法之一，分为单源最短路径和多源最短路径，其中有许多十分重要（且优秀）的算法，如Dijkstra、Bellman-Ford等，也蕴含了很多算法思想。这些算法不仅在信息学竞赛中常用，在实际开发中也常有用到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.listener1379.top/categories/Algorithm/"/>
    
      <category term="Shortest-Path" scheme="http://www.listener1379.top/categories/Algorithm/Shortest-Path/"/>
    
    
      <category term="算法" scheme="http://www.listener1379.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="http://www.listener1379.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法讲解</title>
    <link href="http://www.listener1379.top/Algorithm/String/KMP/"/>
    <id>http://www.listener1379.top/Algorithm/String/KMP/</id>
    <published>2021-04-10T06:57:12.000Z</published>
    <updated>2021-04-10T07:02:04.565Z</updated>
    
    <content type="html"><![CDATA[<p>KMP是一个十分常用的字符串匹配算法</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nextval<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getNextval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>nextval<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nextval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token keyword">else</span>nextval<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>j <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">getNextval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span>j <span class="token operator">=</span> nextval<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">=</span> nextval<span class="token punctuation">[</span>nextKMP<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">;</span><span class="token function">KMP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>out<span class="token operator">:</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Matching failed"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KMP是一个十分常用的字符串匹配算法&lt;/p&gt;
&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre class=&quot;line-numbers language-cpp&quot; data-language=&quot;cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;s
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.listener1379.top/categories/Algorithm/"/>
    
      <category term="String" scheme="http://www.listener1379.top/categories/Algorithm/String/"/>
    
    
      <category term="算法" scheme="http://www.listener1379.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="http://www.listener1379.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>sth-about-electron-vue</title>
    <link href="http://www.listener1379.top/uncategorized/sth-about-electron-vue/"/>
    <id>http://www.listener1379.top/uncategorized/sth-about-electron-vue/</id>
    <published>2021-04-02T13:24:06.000Z</published>
    <updated>2021-04-02T13:37:28.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Html-Webpack-Plugin错误"><a href="#Html-Webpack-Plugin错误" class="headerlink" title="Html Webpack Plugin错误"></a>Html Webpack Plugin错误</h1><p><img src="https://user-images.githubusercontent.com/20612771/57195098-e7e22300-6f4e-11e9-84f9-5d9ed71c7d8d.png" alt></p><p><img src="https://user-images.githubusercontent.com/20612771/57194943-35f62700-6f4d-11e9-872c-585cf6ac5109.png" alt></p><p>Solution:</p><p>将<code>.electron-vue/webpack.web.config.js</code>和<code>electron-vue/webpack.renderer.config.js</code>的<code>plugins</code>下<code>HtmlWebpackPlugin</code>改成：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/index.ejs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">templateParameters</span><span class="token punctuation">(</span><span class="token parameter">compilation<span class="token punctuation">,</span> assets<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      compilation<span class="token operator">:</span> compilation<span class="token punctuation">,</span>      webpack<span class="token operator">:</span> compilation<span class="token punctuation">.</span><span class="token function">getStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      webpackConfig<span class="token operator">:</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">,</span>      htmlWebpackPlugin<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        files<span class="token operator">:</span> assets<span class="token punctuation">,</span>        options<span class="token operator">:</span> options      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      process<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  minify<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    removeAttributeQuotes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    removeComments<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  nodeModules<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后把<code>index.ejs</code>中第16行改成：</p><div class="code-wrapper"><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>browser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="Cannot-find-module-‘axios’"><a href="#Cannot-find-module-‘axios’" class="headerlink" title="Cannot find module ‘axios’"></a>Cannot find module ‘axios’</h1><p>在<code>electron-vue/webpack.renderer.config.js</code>第22行<code>whiteListedModules</code>中加入<code>axios</code>即可 其他同理</p><p>比如说这样</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> whiteListedModules <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'vue'</span><span class="token punctuation">,</span>  <span class="token string">'axios'</span><span class="token punctuation">,</span>  <span class="token string">'vue-electron'</span><span class="token punctuation">,</span>  <span class="token string">'vue-router'</span><span class="token punctuation">,</span>  <span class="token string">'vuex'</span><span class="token punctuation">,</span>  <span class="token string">'vuex-electron'</span><span class="token punctuation">,</span>  <span class="token string">'element-ui'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Html-Webpack-Plugin错误&quot;&gt;&lt;a href=&quot;#Html-Webpack-Plugin错误&quot; class=&quot;headerlink&quot; title=&quot;Html Webpack Plugin错误&quot;&gt;&lt;/a&gt;Html Webpack Plugin错误&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>初中科学生态系统相关知识点</title>
    <link href="http://www.listener1379.top/School/Biology/ecosystem/"/>
    <id>http://www.listener1379.top/School/Biology/ecosystem/</id>
    <published>2021-03-20T14:13:30.000Z</published>
    <updated>2021-03-20T15:52:55.567Z</updated>
    
    <content type="html"><![CDATA[<p>浙江中考会考的知识点都在这了</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/ai1379/ai1379.github.io@master/School/Biology/ecosystem/mindmap.png" alt></p><p>大部分知识点在里面都有了下面就列一些里面没有讲完整的</p><h1 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h1><p>这里列举一些比较容易错的点</p><h2 id="危害最严重的生物"><a href="#危害最严重的生物" class="headerlink" title="危害最严重的生物"></a>危害最严重的生物</h2><p>当某一种生物数量大幅减少时，受影响最严重的生物是<strong>直接以之为食</strong>的生物。举一个例子：有一条食物链是<code>A -&gt; B -&gt; C -&gt; D</code>，当其中<code>B</code>减少时受危害最严重的就是<code>C</code></p><h2 id="有关能量流动"><a href="#有关能量流动" class="headerlink" title="有关能量流动"></a>有关能量流动</h2><p>看一个例题：</p><div class="note note-secondary">            <p><img src="https://i.loli.net/2021/03/20/vSrxGmlWaywegb3.png" style="zoom:33%;"></p><p>问：为何此生态系统中能量可以更多的被人类利用</p>          </div><p>在这个生态系统中，无法被某些消费者利用的能量被蝇蛆摄入，然后重新被人或其他消费者摄入重新利用，因此应当这么答：</p><div class="note note-success">            <p>能量被多级利用，提高了能量利用率。</p>          </div><p>另外注意，蝇蛆在这里虽然是在吃粪，但是它并没有捕食其他的生物，不能算入消费者，而应当属于分解者</p><h2 id="能量流动"><a href="#能量流动" class="headerlink" title="能量流动"></a>能量流动</h2><p>首先我们知道<strong>能量流动的通道是食物链和食物网</strong></p><p>但是如果有题目要问能量流动通过什么进行就不可以这么说了。</p><p>我们来看能量流动这个过程：一个生物捕食了另一个生物，对其进行消化吸收，从而实现能量的流动，也就是说生物通过同化作用将别的生物中所含的能量转化为自身的能量。因此可以得出结论：<strong>能量流动通过同化作用进行</strong></p><p>另外还有一个重点：<strong>生态系统中能量流动的起点是生产者固定太阳能</strong></p><h2 id="各种因素"><a href="#各种因素" class="headerlink" title="各种因素"></a>各种因素</h2><p>生态系统的成分里面提到过：生态系统由生物因素和非生物因素组成。这里还有一个<strong>生态因素</strong>的概念：<strong>在生态系统中影响某一种生物生活和分布的因素称作生态因素</strong></p><h2 id="有关群落和种群"><a href="#有关群落和种群" class="headerlink" title="有关群落和种群"></a>有关群落和种群</h2><h3 id="生物种群"><a href="#生物种群" class="headerlink" title="生物种群"></a>生物种群</h3><p><strong>生活在一定区域内所有同种生物个体的总和是种群</strong></p><p>也就是说有两个要点：<strong>所有</strong>、<strong>同种生物</strong></p><div class="note note-danger">            <p>这两类都不是群落：</p><ol><li>生活在一片农田里所有的蛇（蛇有很多种）</li><li>生活在一个池塘里的所有蝌蚪（成蛙和蝌蚪是一个物种 没有包括所有的生物个体）</li></ol>          </div><h3 id="生物群落"><a href="#生物群落" class="headerlink" title="生物群落"></a>生物群落</h3><p><strong>生活在一定区域内所有群落的总和</strong></p><p>在其中起主导作用的是植物</p><h2 id="植被和植物群落"><a href="#植被和植物群落" class="headerlink" title="植被和植物群落"></a>植被和植物群落</h2><p>在一定区域内所有的植物为<strong>植物群落</strong></p><p>覆盖整个地球表面的植物群落称为<strong>植被</strong></p><p>也就是说植被是一个比植物群落大得多的概念</p><h2 id="微生物-amp-分解者"><a href="#微生物-amp-分解者" class="headerlink" title="微生物 &amp; 分解者"></a>微生物 &amp; 分解者</h2><p>微生物主要指细菌和真菌，而分解者则是生态系统中的一个概念</p><p>在一般情况下分解者都是微生物，但是不排除在某些特殊情况下也有一些动物是分解者，比如前面提到的蝇蛆。因此答题的时候得要注意区分分解者和微生物</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浙江中考会考的知识点都在这了&lt;/p&gt;
    
    </summary>
    
    
      <category term="School" scheme="http://www.listener1379.top/categories/School/"/>
    
      <category term="Biology" scheme="http://www.listener1379.top/categories/School/Biology/"/>
    
    
      <category term="生物" scheme="http://www.listener1379.top/tags/%E7%94%9F%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>有关一些技术活的计划</title>
    <link href="http://www.listener1379.top/Plans/plan/"/>
    <id>http://www.listener1379.top/Plans/plan/</id>
    <published>2021-03-19T10:19:03.000Z</published>
    <updated>2021-04-10T07:08:06.385Z</updated>
    
    <content type="html"><![CDATA[<p>马上中考完了之后打算做的事情以及相关的一些想法都写在下面了</p><span id="more"></span><h1 id="这个博客站"><a href="#这个博客站" class="headerlink" title="这个博客站"></a>这个博客站</h1><p>这个博客站（以及另一个站<a href="&quot;https://cn.arendelleodyssey.com/&quot;">AOCN</a>）有好多博文原本打算写到现在还没写。这里先列个表记录一下。</p><div>            <input type="checkbox" disabled>翻墙基本指南          </div><div>            <input type="checkbox" disabled>KMP算法讲解          </div><div>            <input type="checkbox" disabled>最短路算法解析          </div><div>            <input type="checkbox" disabled>jQuery笔记          </div><h1 id="FroztaleQQBot"><a href="#FroztaleQQBot" class="headerlink" title="FroztaleQQBot"></a>FroztaleQQBot</h1><p>这是一个C++写的QQ机器人 基于Mirai和mirai-cpp。也许会用Qt Core来做。目前看来没这个必要。</p><p>有几点构思大概这样</p><h2 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h2><p>每个插件作为一个DLL动态加载，最终目标想着参照Qv2ray，有空的时候翻翻Qv2ray的代码做参考。</p><p>现在的实现思路大致是这样的。首先在核心部分做一个有点像总线的东西，加载到DLL插件的时候就把它对应的元数据加载到这条线上。插件应该是一个抽象类，需要包括一些必要的数据，比如说用一个字符串类存储插件名称和描述，然后还需要用一些方式来描述触发插件行为所对应的时间，还需要对应的处理函数。也许可以通过某些机制让插件开发者自己注册事件，然后在加载插件的时候载入主事件循环。</p><p>另外也许有些核心功能可以用内置插件的形式实现。</p><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><p>这里指的是群消息指令。</p><p>目前的思路是对于每一条群消息都先匹配一下有没有包括指令前缀，有的话作为一个指令发出一个事件，没有则跳过。这种做法在群比较多的情况下效率会很低，但是似乎并没有办法优化。</p><p>当接收到指令的时候创建一个事件对象，其中应该包括指令名称及其参数。为了方便这里的参数打算使用mirai-cpp所提供的<code>Cyan::iMassage</code>抽象类的子类所构成的一个<code>std::vector</code>来存储。但这里有一个问题是这些东西并不是同一个类型的变量，因此打算使用指针来存，实在不行也可以用<code>std::any</code>。</p><h1 id="Neutron"><a href="#Neutron" class="headerlink" title="Neutron"></a>Neutron</h1><p>一个跨平台的第三方QQ客户端</p><p>打算用electron或者Qt来做。用Qt的好处是可以直接复用FroztaleQQBot的代码，坏处在于有些地方太丑，相比之下Electron的颜值更能让我满意，但是坏处就是得要重新把C++的代码翻译成TypeScript。</p><p>也许可以用C++做一个Node.js库来加载原有的一些DLL来复用。或者也可以在FroztaleBot里实现http api来实现。</p><h1 id="EAer’s-Pub"><a href="#EAer’s-Pub" class="headerlink" title="EAer’s Pub"></a>EAer’s Pub</h1><blockquote><p>就是原来的EALibrary</p></blockquote><p>这个东西暑假必须重新开张。</p><p>三个方案：沿袭原来的WordPress / 用Express或Nest.js重新写 / Cpp+Vue</p><h2 id="WordPress方案"><a href="#WordPress方案" class="headerlink" title="WordPress方案"></a>WordPress方案</h2><p>优点：</p><ol><li>较为成熟 可能比纯自建要稳一些 有些安全问题也很好解决</li><li>插件多 方便</li><li>不用写太多代码 快</li></ol><p>缺点：</p><ol><li>不熟悉PHP</li><li>不太好定制</li></ol><h2 id="Node-js方案"><a href="#Node-js方案" class="headerlink" title="Node.js方案"></a>Node.js方案</h2><p>优点：</p><ol><li>纯手写 定制化程度高</li><li>更有可控性</li></ol><p>缺点：</p><ol><li>费时费力 不一定能快速重建</li><li>有些问题不方便及时解决</li></ol><h2 id="C-方案"><a href="#C-方案" class="headerlink" title="C++方案"></a>C++方案</h2><p>用libevent/boost::asio+MySQL做后端，Vue做前端</p><p>优点在于C++更熟悉 缺点是开发效率低下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马上中考完了之后打算做的事情以及相关的一些想法都写在下面了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Plans" scheme="http://www.listener1379.top/categories/Plans/"/>
    
    
      <category term="总结和计划" scheme="http://www.listener1379.top/tags/%E6%80%BB%E7%BB%93%E5%92%8C%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>在后台运行MCL</title>
    <link href="http://www.listener1379.top/Mirai/mcl-bkground/"/>
    <id>http://www.listener1379.top/Mirai/mcl-bkground/</id>
    <published>2021-03-19T09:15:06.000Z</published>
    <updated>2021-03-19T10:09:01.563Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在做一个QQ机器人，用的是<a href="https://github.com/mamoe/mirai">Mirai</a>和<a href="https://github.com/cyanray/mirai-cpp">mirai-cpp</a>，需要在后台部署Mirai Console，然而主流的screen方案在我的Linux服务器上不知为何行不通，所以写了一个service</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">[Unit]Description&#x3D;Mirai Console Loader Systemd[Service]Type&#x3D;simpleWorkingDirectory&#x3D;&lt;这里写mcl目录 一定要绝对目录&gt;ExecStart&#x3D;&lt;这里写运行的文件位置&gt;[Install]Alias&#x3D;Mirai.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>放到<code>/usr/lib/systemd/system</code>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天在做一个QQ机器人，用的是&lt;a href=&quot;https://github.com/mamoe/mirai&quot;&gt;Mirai&lt;/a&gt;和&lt;a href=&quot;https://github.com/cyanray/mirai-cpp&quot;&gt;mirai-cpp&lt;/a&gt;，需要在后台部署Mi
      
    
    </summary>
    
    
      <category term="Mirai" scheme="http://www.listener1379.top/categories/Mirai/"/>
    
    
      <category term="Mirai" scheme="http://www.listener1379.top/tags/Mirai/"/>
    
  </entry>
  
  <entry>
    <title>十大基本排序算法 + TimSort &amp; IntroSort</title>
    <link href="http://www.listener1379.top/Algorithm/Others/sort/"/>
    <id>http://www.listener1379.top/Algorithm/Others/sort/</id>
    <published>2021-02-19T08:29:43.000Z</published>
    <updated>2021-09-12T03:38:11.615Z</updated>
    
    <content type="html"><![CDATA[<p>本文比较散 适合有基础的同学 同时也给自己复习留下一点笔记</p><p><del>几个月不做算法题的后果就是发现自己连快排都不会打了</del></p><span id="more"></span><p>说是说关于各种排序，主要的篇幅应该还是会集中在大名鼎鼎的<a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a>上</p><h1 id="O-n-2-​排序"><a href="#O-n-2-​排序" class="headerlink" title="$O(n^2)$​排序"></a>$O(n^2)$​排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序的思路很简单：每轮从头到尾每次比较相邻两数大小，如果反了就交换。这样一轮下来，最大的数就会逐渐移动到序列结尾。那么只要进行n轮操作，整个序列就是有序的了。这个过程与泡泡上浮相似，因此得名冒泡排序。</p><p>代码实现很简单：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>对于冒泡排序有个很简单的优化：每轮冒泡时判断有没有过交换。如果有一轮没发生任何交换，那么说明序列已经有序。这时候就可以退出函数。</p><p>时间复杂度显然是$O(n^2)$的。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序在每次排序的时候选取待排序序列中的最小值，然后和序列头交换。这个算法同样非常直观，在日常生活中也经常使用。</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">SelectionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> minIdx<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    minIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> minIdx <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>在冒泡、选择和插入这三种比较简单的算法里，插入排序是效率最高的（但时间复杂度仍然是$O(n^2)$​​）。同时他也是很经典的一个算法，在《算法导论》最开始讲算法分析便以之为例。注意，在序列基本有序的情况下，<strong>插入排序的时间复杂度基本可以达到$O(n)$</strong>。正是因此，插入排序成为了许多较快的排序算法的基础。而且插入排序的常数很低，在数据量小的情况下甚至比快排还要快上不少。</p><p>插入排序简单而又直观。</p><p>想象一下洗牌的时候，随手抓了一把牌，我们得要把他们按照顺序排好。一般来说，我们会先在后面没有排过序的那些牌里选一张，然后在前面排过序了的牌里面找，找到应该要把这张牌插入在哪两个之间，把它插入进去。一般为了代码实现方便，都会取没排过序里最靠前的一张。</p><p>插入排序用的就是这个原理。直接贴代码吧。</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token comment">// left和right都包含</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> key<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> left <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔是个人名。希尔排序是第一个突破$O(n^2)$的排序算法。</p><p>希尔排序是基于直接插入排序而来的，其基本思想是根据一定的步长进行直接插入排序，然后逐步缩小步长，直到最后做一次普通的插入排序。看起来这个排序的速度会比插入排序慢得多，但注意，在序列基本有序的情况下插入排序效率极高。经过前面的多次处理，整个序列已经基本有序，因此此时插入排序速度也是很高的。希尔排序的时间时间复杂度与步长序列的选择有关，最优复杂度是$O(n\log^2n)$​。</p><p>这里有动画演示（图是盗的）：</p><p><img src="https://pic3.zhimg.com/v2-f14e4169ff39bad42c3dd6c385ad9c72_b.webp" alt="希尔排序的动画演示"></p><p>代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// O(n^1.5)复杂度</span>  <span class="token keyword">int</span> delta <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    delta <span class="token operator">=</span> delta <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token comment">// 处理步长初始值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> delta <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> delta <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> delta<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 注意：动图里看起来是每组分别排序，一组排完排另一组，但是在代码实现里一般写在一块</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> delta <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> delta<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> delta<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="O-n-log-n-​排序"><a href="#O-n-log-n-​排序" class="headerlink" title="$O(n\log n)$​排序"></a>$O(n\log n)$​排序</h1><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆是一种数据结构，是一颗<strong>完全二叉树</strong>。这颗树有一个特点：对于这棵树的每一棵子树，它的根一定是最小（或最大）的。它支持$O(1)$查询最小值、$O(\log n)$​​​的插入删除。也就是说，如果把序列里的数据建成一个堆，然后不断取出堆顶并把它删除，那么就可以实现排序。在C++ STL中封装了<code>priority_queue</code>，它的内部实现就是堆。</p><p>那么如何实现堆呢？</p><p>首先我们看看堆的几个基本操作：</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>top</code></td><td>取出堆顶</td></tr><tr><td style="text-align:left"><code>pop</code></td><td>弹出堆顶并返回原来堆顶的值</td></tr><tr><td style="text-align:left"><code>push</code></td><td>将一个数加入堆</td></tr><tr><td style="text-align:left"><code>up</code></td><td>上调一个点使整棵树满足堆的条件</td></tr><tr><td style="text-align:left"><code>down</code></td><td>下调一个点使整棵树满足堆的条件</td></tr></tbody></table></div><p>因为堆是一颗完全二叉树，因此可以用数组模拟。整个类的定义如下（这里实现的是小根堆，没有用模板）：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">heap</span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">int</span> h<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> _size<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> _size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    h<span class="token punctuation">[</span><span class="token operator">++</span>_size<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token function">up</span><span class="token punctuation">(</span>_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>_size<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>top</code>操作很简单，直接返回堆顶即可。<code>push</code>操作时，先把要插入的数放在尾部，然后上调。<code>pop</code>时，将堆顶放在尾部删除，然后把新的堆顶下调。这三个操作都不复杂。堆这种数据结构的核心在于上调和下调。</p><p>先放代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> heap<span class="token operator">::</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>pos <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>pos <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pos <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> heap<span class="token operator">::</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> minIdx<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> _size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    minIdx <span class="token operator">=</span> pos <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIdx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> _size <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>minIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> minIdx<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pos <span class="token operator">=</span> minIdx<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://www.luogu.com.cn/problem/P1177">洛谷P1177 【模板】快速排序</a></p><blockquote><p>注：这个题有毒瘤数据，不开O2只能过三个点</p></blockquote><p>快排是一个极其经典且优秀的算法，几乎每一种主流的语言都在自己的标准库里写了一套快排的某种实现，大多数混合排序算法中也有快排的影子。</p><p>快排是一个典型的分治算法。它将整个序列以某个数为标准分出较小的和较大的两个部分，再将两个部分分别排序，最终使得整个序列被排序。下面是演示动画，来自WikiPedia。</p><p><img src="https://i.loli.net/2021/02/20/gAhxqGSrlw9zcHt.gif" alt></p><p>算法步骤如下：</p><ol><li>取基准值：从整个序列里任取一个数作为基准<code>pivot</code>，在这张图里用红色表示。<strong>这个基准的选取会直接的影响算法效率，如果这个基准没有取好可能会导致快排退化为冒泡排序。</strong>对于快排的一个优化就是改进基准值的选取。</li><li>分割：先把<code>pivot</code>移到最后面或最前面，再把比<code>pivot</code>小的放在前面，把比它大的放在后面，最后把<code>pivot</code>放到两个序列中间。到这一步后，<code>pivot</code>这个数就已经排在它应该在的地方了，之后的过程不会再改变这个数的位置了。</li><li>递归：对前后两个没有排序的部分分别进行快排，直到序列里只有一个数。</li></ol><p>朴素的快速排序算法平均时间复杂度是$O(n\log n)$​，但最坏时间复杂度是$O(n^2)$​，此时它退化成了冒泡排序。</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">choosePiovt</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 三数取中</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> z <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> z<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>z <span class="token operator">&lt;=</span> x <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> y <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> z<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>z <span class="token operator">&lt;=</span> y <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> z <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> z <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> ins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">InsertSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 序列小的时候用插入排序更快</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token function">choosePiovt</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span> pivot <span class="token operator">=</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">QuickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">QuickSort</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文比较散 适合有基础的同学 同时也给自己复习留下一点笔记&lt;/p&gt;
&lt;p&gt;&lt;del&gt;几个月不做算法题的后果就是发现自己连快排都不会打了&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.listener1379.top/categories/Algorithm/"/>
    
      <category term="Others" scheme="http://www.listener1379.top/categories/Algorithm/Others/"/>
    
    
      <category term="算法" scheme="http://www.listener1379.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>jQuery笔记</title>
    <link href="http://www.listener1379.top/uncategorized/jquery/"/>
    <id>http://www.listener1379.top/uncategorized/jquery/</id>
    <published>2021-02-07T05:25:20.000Z</published>
    <updated>2021-02-07T06:26:50.960Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>背包问题详解</title>
    <link href="http://www.listener1379.top/Algorithm/DP/Pack/pack-problem/"/>
    <id>http://www.listener1379.top/Algorithm/DP/Pack/pack-problem/</id>
    <published>2020-10-21T11:46:56.000Z</published>
    <updated>2020-10-23T04:00:21.098Z</updated>
    
    <content type="html"><![CDATA[<p>背包问题是一类问题，几乎都是用DP解决。</p><span id="more"></span><h1 id="用贪心算法解决背包问题"><a href="#用贪心算法解决背包问题" class="headerlink" title="用贪心算法解决背包问题"></a>用贪心算法解决背包问题</h1><p>我们先来看看最简单的一类背包问题：</p><p class="note note-primary">现有一个容量为V的背包和N个物品，每个物品有自己的体积和价值，一个物品可以只取一部分，求如何使装入背包的物品价值最大</p><p>这个题其实不需要DP，只需使用贪心就好了</p><p>对于每个物品，求出它的性价比（即价值和体积的比值），然后按照性价比排序，从大到小取直到背包装满为止。</p><p>这类问题很简单，但接下来的几个背包问题就没有这么友好了。</p><h1 id="用DP解决几种基础的背包问题"><a href="#用DP解决几种基础的背包问题" class="headerlink" title="用DP解决几种基础的背包问题"></a>用DP解决几种基础的背包问题</h1><h2 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0-1背包问题"></a>0-1背包问题</h2><h3 id="解决0-1背包问题的思路"><a href="#解决0-1背包问题的思路" class="headerlink" title="解决0-1背包问题的思路"></a>解决0-1背包问题的思路</h3><p>我们看这个例题：</p><p><a class="btn" href="https://www.luogu.com.cn/problem/P1048" title="NOIP2005 T3">洛谷P1048 采药</a></p><p>这个例题是非常非常经典的0-1背包，几乎可以看作是一个模板题。</p><p>对于这么一个0-1背包问题，我们一开始想到的应该也是贪心。然而贪心算法在这里是不可行的。</p><p>那么怎么办呢？答案是DP。</p><p>现已知第$i$个物品价值为$ v_i$，体积为$w_i$，背包总容量$W$。</p><p>我们定义状态$f_{i,j}$为只取前$i$个物品背包容量为$j$时的最优解。</p><p>那么接下来的问题就是怎么推导状态转移方程了。</p><p>现在考虑已经处理好了前$i-1$个物品的所有状态。那么对于第$i$个物品，显而易见的就有取和不取两个选择。我们将这两种情况分开考虑：取第$i$个物品，则背包剩余容量会减少$w<em>i$，而价值会增加$v_i$，故此时最大价值为$f</em>{i-1,j-w<em>i}+v_i$；不取第$i$个物品，则最大价值不变，仍为$f</em>{i-1,j}$。因此我们可以写出这样的状态转移方程：</p><script type="math/tex; mode=display">f_{i,j}=\max(f_{i-1,j},f_{i-1,j-w_i}+v_i)</script><p>容易发现<code>f</code>数组的第一个下标是没用的，因此我们可以使用滚动数组进行优化：</p><script type="math/tex; mode=display">f_j=\max(f_j,f_{j-w_i}+v_i)</script><p><strong>记住这个状态转移方程，它是解决其他所有背包问题的基础</strong></p><p>但是这样就很容易写出这样子的错误代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> W <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>问题出在哪里呢？观察代码可以发现，在这段代码里面，当$j\geqslant w<em>i$时，$f</em>{i,j}$是会受到$f<em>{i,j-w_i}$影响的，也就是说不能保证$f</em>{i,j}$是从$f_{i-1,j-w_i}$推导而来。这就相当于一个物品可以多次被加入背包，显然是不符合题意的。解决方法很简单，把第二层循环倒过来就行了：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> W<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="有关初始化的注意事项"><a href="#有关初始化的注意事项" class="headerlink" title="有关初始化的注意事项"></a>有关初始化的注意事项</h3><p>问求最优解的背包问题时，通常有两种类型：要求恰好装满背包与不必装满背包。解决这两类问题在代码上的区别仅仅在<code>f</code>数组的初始化上。要求<strong>恰好</strong>装满背包时，除了<code>f[0]</code>为0其他都应当设为$-\infty$，而如果要求不必装满的话则应全部设为0。具体的原因请读者自己思考，或者参考崔天翼的<a href="https://github.com/tianyicui/pack/blob/master/V2.pdf">背包问题九讲</a></p><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>这类问题和0-1背包很像，唯一的区别在于完全背包里的每一个物品可以多次被装进背包。</p><p>我们看下之前在讲解0-1背包说的这段话：</p><blockquote><p>问题出在哪里呢？观察代码可以发现，在这段代码里面，当$j\geqslant w<em>i$时，$f</em>{i,j}$是会受到$f<em>{i,j-w_i}$影响的，也就是说不能保证$f</em>{i,j}$是从$f_{i-1,j-w_i}$推导而来。这就相当于一个物品可以多次被加入背包，显然是不符合题意的。</p></blockquote><p>那么显然解决完全背包的代码就是之前说的解决0-1背包的经典错误代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> W <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        f<span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>那肯定有读者要问了：为什么倒过来就相当于一个物品可以多次被加入背包呢？</p><p>其实很好理解：对于0-1背包，当考虑第$i$个物品时，我们应当从<strong>绝无已经选入这个物品</strong>的子问题的解，也就是$f<em>{i-1,j-w_i}$推导而来；而对于完全背包，当考虑第$i$个物品时，我们应当从一个可能已经选过第$i$个物品的子问题的解，也就是$f</em>{i,j-w_i}$推来。</p><h2 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h2><p>这个问题介于0-1背包和完全背包之间：0-1背包要求每个物品只能取一次，完全背包允许每个物品取用无限次，而多重背包则给出了每个物品最多取用的次数。</p><p>现已知第$i$个物品有$m_i$个，每一个的价值为$ v_i$，体积为$w_i$，背包总容量$W$，求最大价值。</p><h3 id="朴素的解法"><a href="#朴素的解法" class="headerlink" title="朴素的解法"></a>朴素的解法</h3><p>这个很容易想到：对于每一个物品，枚举它取用的次数，然后转化为0-1背包解决。状态转移方程如下：</p><script type="math/tex; mode=display">f_{i,j}=\max^{m_i}_{k=0}(f_{i-1,j-k\times w_i}+k\times v_i)</script><p>时间复杂度为$O(nW\sum^n_{i=1}m_i)$</p><h3 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h3><p>朴素解法的时间复杂度是显然不可行的。</p><p>对于这个时间复杂度，$O(nW)$的部分显然是不可能再进行优化了的（因为即便是原始的0-1背包也只能优化到这个复杂度），那么我们只能从后面$O(\sum^n_{i=1}m_i)$的部分入手。</p><p>在我们朴素的做法里，每个物品$A<em>i$都被拆分成了$m_i$个物品。这$m_i$个物品是完全相同的。我们记$A</em>{i,j}$为将$A<em>i$分裂出来得到的新物品中的第$j$件。那么显然，我们重复考虑了【同时取$A</em>{i,1}$和$A<em>{i,2}$】和【同时取$A</em>{i,2}$和$A_{i,3}$】等重复情况。这导致了时间复杂度的增加。言外之意就是说，要改进时间复杂度，得要改进拆分方式。</p><p>我们应用二进制的思想。令$A_{i,j}\left(j\in\left[0,\lfloor \log_2(m_i+1)\rfloor-1\right]\right)$分别表示由 $2^j$个单个物品组合而成的大物品。特殊地，若$m_i+1$不是$2$的整数次幂，则需要在最后添加一个由$m_i-2^{\lfloor \log_2(m_i+1)\rfloor-1}$个单个物品组合而成的大物品用于补足。举几个例子：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">6 &#x3D; 1+2+38 &#x3D; 1+2+4+118 &#x3D; 1+2+4+8+331 &#x3D; 1+2+4+8+16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>特殊的，当$w_i\times m_i \geqslant W$时，可以将其看作完全背包，这样可以进一步优化复杂度。</p><h2 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h2><p>这种就很简单了。只需要将不同的情况用不同种类背包的代码实现即可。伪代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">for each item:    if isZeroOnePack:        ZeroOnePack()    elif isCompletePack:        CompletePack()    elif isMultiplePack:        MultiplePack()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背包问题是一类问题，几乎都是用DP解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.listener1379.top/categories/Algorithm/"/>
    
      <category term="DP" scheme="http://www.listener1379.top/categories/Algorithm/DP/"/>
    
      <category term="Pack" scheme="http://www.listener1379.top/categories/Algorithm/DP/Pack/"/>
    
    
      <category term="DP(动态规划)" scheme="http://www.listener1379.top/tags/DP-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1525关押罪犯题解</title>
    <link href="http://www.listener1379.top/DataStructure/P1525/"/>
    <id>http://www.listener1379.top/DataStructure/P1525/</id>
    <published>2020-09-06T00:52:16.000Z</published>
    <updated>2020-09-12T06:56:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="DataStructure" scheme="http://www.listener1379.top/categories/DataStructure/"/>
    
    
      <category term="题解" scheme="http://www.listener1379.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="数据结构" scheme="http://www.listener1379.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>WordPress权限设置</title>
    <link href="http://www.listener1379.top/WordPress/wp-caps/"/>
    <id>http://www.listener1379.top/WordPress/wp-caps/</id>
    <published>2020-08-23T14:30:36.000Z</published>
    <updated>2020-08-23T14:49:20.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="WordPress" scheme="http://www.listener1379.top/categories/WordPress/"/>
    
    
      <category term="WordPress" scheme="http://www.listener1379.top/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>批量设置WordPress公开显示用户名</title>
    <link href="http://www.listener1379.top/WordPress/set-wordpress-display-name/"/>
    <id>http://www.listener1379.top/WordPress/set-wordpress-display-name/</id>
    <published>2020-08-23T12:46:32.000Z</published>
    <updated>2020-09-12T06:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然我这个站不是用wp搭的，但是我还有另外一个wp的站，记录在此</p></blockquote><p>首先我们知道WordPress中每个用户都有用户名和昵称两个名字，而相对应的也会有一个显示名称的选项，默认应该是用户名。这个时候如果我们要批量修改为昵称的话可以这样操作：</p><ol><li>进入WordPress的数据库后台，<strong>注意不是网站后台</strong></li><li>然后运行这段代码：</li></ol><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE    &#96;wp_users&#96;INNER JOIN &#96;wp_usermeta&#96; ON &#96;wp_usermeta&#96;.&#96;user_id&#96; &#x3D; &#96;wp_users&#96;.&#96;ID&#96; &amp;&amp; &#96;wp_usermeta&#96;.&#96;meta_key&#96; &#x3D; &#39;nickname&#39;SET    &#96;wp_users&#96;.&#96;display_name&#96; &#x3D; &#96;wp_usermeta&#96;.&#96;meta_value&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>就可以了。</p><p>另外也可以设置每次注册时使用昵称作为默认显示名，方法是在主题的<code>function.php</code>中加入以下代码：</p><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">set_default_display_name</span><span class="token punctuation">(</span> <span class="token variable">$user_id</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">get_userdata</span><span class="token punctuation">(</span> <span class="token variable">$user_id</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'%s'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">nickname</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'ID'</span> <span class="token operator">=></span> <span class="token variable">$user_id</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'display_name'</span> <span class="token operator">=></span> <span class="token variable">$name</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'nickname'</span> <span class="token operator">=></span> <span class="token variable">$name</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">wp_update_user</span><span class="token punctuation">(</span> <span class="token variable">$args</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'user_register'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'set_default_display_name'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这样就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;虽然我这个站不是用wp搭的，但是我还有另外一个wp的站，记录在此&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们知道WordPress中每个用户都有用户名和昵称两个名字，而相对应的也会有一个显示名称的选项，默认应该是用户名。这个时候如果我们要批
      
    
    </summary>
    
    
      <category term="WordPress" scheme="http://www.listener1379.top/categories/WordPress/"/>
    
    
      <category term="WordPress" scheme="http://www.listener1379.top/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础</title>
    <link href="http://www.listener1379.top/Language/Golang/gobasics/"/>
    <id>http://www.listener1379.top/Language/Golang/gobasics/</id>
    <published>2020-07-08T12:12:57.000Z</published>
    <updated>2020-10-22T23:47:03.275Z</updated>
    
    <content type="html"><![CDATA[<p>Go是一种由谷歌开发的编程语言，是一种静态的强类型语言，跟C与C++一样需要编译。</p><span id="more"></span><p>首先Go官方是有教程的，也有中文版，建议用官方的教程，或者菜鸟教程的也不错。</p><p><a class="btn" href="https://tour.go-zh.org" title="Go语言之旅">官方教程</a></p><p><a class="btn" href="https://www.runoob.com/go" title="菜鸟教程">菜鸟教程</a></p><p>这篇文章不会讲到有关Go环境安装的内容，有空再另写一篇。</p><p>接下来进入正文</p><hr><h1 id="1-包"><a href="#1-包" class="headerlink" title="1 包"></a>1 包</h1><p>首先我们看Go的Hello,World程序：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>（奇怪的Hello,World又增加了！）</p><p>我们来逐行分析这段简短的代码：</p><p>第一行<code>package main</code>就是创建<code>main</code>包的语句。<strong>任何一个Go程序都由包构成，并且从<code>main</code>包开始运行</strong>。</p><p>接着是<code>import &quot;fmt&quot;</code>，这句话通过导入路径<code>fmt</code>使用了<code>fmt</code>包。引入<code>fmt</code>包是为了在后面调用这个包里的<code>Println</code>函数。<strong>包名应与导入路径的最后一个元素一致</strong>，比方说在<code>fmt</code>包中每一个源码文件的第一行都应该是<code>package fmt</code>。之所以说是最后一个元素是因为我们同时可能见到<code>import math/rand</code>这种东西，而此时他的源码文件第一行就不是<code>package math/rand</code>而是<code>paskage rand</code></p><p>当我们要导入多个包时，可以使用一个圆括号把所有的包同时导入，也可以一个包一个包导入，也就是说，下面两种写法是等效的：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//第一种</span><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token comment">//第二种</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">import</span> <span class="token string">"math"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Go官方建议使用第一种，因此我们一般都只用第一种形式。</p><p>接下来我们来看另一段代码：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意到这里<code>math.Pi</code>和<code>fmt.Println()</code>两个函数首字母都是大写，他们是<strong>已导出</strong>的，也就是在包外可以访问的。而如果是小写的则是<strong>未导出</strong>的。</p><p>有些读者可能联想到了一些其他的东西：类的<code>public</code>与<code>private</code>。当我们把变量或函数的首字母大写时，就相当于C++/Java/C#中给他加上了<code>public</code>修饰，而如果是小写则相当于加上了<code>private</code>。</p><h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2 函数"></a>2 函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>回顾一下我们的Hello World程序：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在这里我们创建了一个函数<code>main()</code>，它是一个典型的没有参数也没有返回值的函数，改写成C/C++就是这样：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>接着我们可以在程序中加入一个加法函数：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>翻译成C++就是这样：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意到Go与其他C系的语言有一个很大的区别：Go中返回值和参数的类型是放在名称后面的，关于Go中这样设计的原因可以看<a href="https://blog.go-zh.org/gos-declaration-syntax">这篇文章</a></p><p>在Go中，如果函数的多个连续的形参类型相同，可以只保留最后一个的类型，而省略前面的几个，这样我们的<code>add</code>函数就可以改写成这样：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><p>与C系语言不同的是，Go的函数可以返回多个返回值。而与此同时的Go的赋值符号<code>:=</code>也可以将多个值按顺序依次赋值，同时<code>:=</code>也可以进行类型推导，也就是说这样的代码是可以的：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> y<span class="token punctuation">,</span> x<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>最终会输出<code>world hello</code></p><h2 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h2><p>Go函数与C系语言函数的区别还有一点：它可以命名返回值</p><p>我们可以继续修改我们的<code>swap</code>函数：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">=</span> yb <span class="token operator">=</span> x<span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这个时候我们将它的两个返回值命名了，此时如果<code>return</code>没有参数则会返回已经命名的返回值。这种返回语句称做直接返回语句，通常只用于这样较短的函数中，而不建议在太长的函数里使用</p><h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p class="note note-warning">在使用`var`初始化的时候我们不用`:=`而使用`=`</p><p>与函数形参一样，类型放在声明后面。如果有初始化可以省略类型。同时也可以不写<code>var</code>而是直接变量名后<code>:=</code>进行赋值来进行初始化。</p><p>也就是说以下几种写法是一样的：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1</span>    <span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span>    a<span class="token operator">=</span><span class="token number">10</span>    b<span class="token operator">=</span><span class="token number">20</span>        <span class="token comment">//2</span>    <span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span>        <span class="token comment">//3</span>    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>但是注意：<strong>像<code>a, b := 10, 20</code>这种写法不能出现在函数外面</strong></p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>Go的基本类型如下：</p><div class="table-container"><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td><code>bool</code></td><td>布尔型，表示<code>true</code>/<code>false</code></td></tr><tr><td><code>string</code></td><td>字符串</td></tr><tr><td><code>int</code> <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code> <code>uint</code> <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code> <code>uintptr</code></td><td>整型</td></tr><tr><td><code>byte</code></td><td><code>uint8</code>的别名，表示一个字节</td></tr><tr><td><code>rune</code></td><td><code>int32</code>的别名，表示一个Unicode码点</td></tr><tr><td><code>float32</code> <code>float64</code></td><td>实数类型</td></tr><tr><td><code>complex64</code> <code>complex128</code></td><td>复数类型，包括实部和虚部</td></tr></tbody></table></div><p>这些内容应该都是很好理解的，在此就不赘述了。</p><h2 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h2><p>当一个变量在定义时没有初始化，那么将会给它赋为零值。</p><div class="table-container"><table><thead><tr><th>基本类型</th><th>零值</th></tr></thead><tbody><tr><td><code>bool</code></td><td><code>false</code></td></tr><tr><td><code>string</code></td><td>“”</td></tr><tr><td>其他数值类型</td><td>0</td></tr></tbody></table></div><p>我们可以用下面的程序来输出基本类型对应的零值：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">var</span> f <span class="token builtin">float64</span><span class="token keyword">var</span> b <span class="token builtin">bool</span><span class="token keyword">var</span> s <span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v %q\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Go与C/C++不同的是，它<strong>必须</strong>进行<strong>显式</strong>的类型转换</p><p>比方说，下面这段代码在C++里是合法的：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> c<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">int</span> c2<span class="token operator">=</span>c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>但是在Go里面这样的代码是不行的：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">var</span> c2 <span class="token builtin">int</span>c2 <span class="token operator">=</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>那怎样才可以让这段代码在Go里也一样能运行呢？方法就是加上显式的类型转换：</p><div class="code-wrapper"><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">var</span> c2 <span class="token builtin">int</span>c2 <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go是一种由谷歌开发的编程语言，是一种静态的强类型语言，跟C与C++一样需要编译。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Language" scheme="http://www.listener1379.top/categories/Language/"/>
    
      <category term="Golang" scheme="http://www.listener1379.top/categories/Language/Golang/"/>
    
    
      <category term="语言" scheme="http://www.listener1379.top/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Electron安装</title>
    <link href="http://www.listener1379.top/Others/electron-failed/"/>
    <id>http://www.listener1379.top/Others/electron-failed/</id>
    <published>2020-04-30T13:26:33.000Z</published>
    <updated>2020-10-18T03:11:24.541Z</updated>
    
    <content type="html"><![CDATA[<p>有关Electron安装的一些事项</p><span id="more"></span><p>Electron安装直接使用npm官方的源极其缓慢，因此我们通常都会使用淘宝源，这个时候安装时就要添加选项<code>--registry=https://registry.npm.taobao.org/</code></p><p>然而如果我们这么加了之后还是会卡在<code>install.js</code>的地方，因此我们又要加一个选项<code>--electron-mirror=https://npm.taobao.org/mirrors/electron</code></p><p>于是下载安装的速度就会变得飞快，然后到最后抛出一个404的错误。</p><p>为什么会这样呢？观察一下源的目录结构就会发现在npm官方源里版本号前是有一个<code>v</code>的，而淘宝源或其他任何一个国内镜像在版本号前面都没有这个<code>v</code>。</p><p>那么我们有三种方案：</p><ol><li>自建一个镜像服务器，并且在版本号前带上<code>v</code></li><li>手动修改<code>install.js</code>里的内容然后手动安装</li><li>使用<code>electron-custom-dir</code>选项设置目录</li></ol><p>第一种方案成本太高，第二种方案过于复杂，因此在这里就先不去考虑，在这里我们讲第三种。</p><p><code>electron</code>提供了一个变量<code>electron-custom-dir</code>来手动选定查找的目录，比如说本来会到源服务器的<code>electron/v8.2.5</code>文件夹查找文件并下载，而如果把<code>electron-custom-dir</code>设定为<code>/8.2.5</code>就不会到原来的<code>electron/v8.2.5</code>查找，而是到<code>electron/8.2.5</code>下去查找。需要注意的是前面的那个<code>/</code>不能漏掉，否则就会跑到<code>electron8.2.5</code>下，显然这是不对的。</p><p>一般情况下这就好了，但是有时候因为玄学原因安装后运行时会提示未完整安装，这个时候可以加上<code>--unsafe-perm=true</code>再试试。如果比较心急的话还可以加上<code>--verbose</code>来查看进度</p><p>因此完整的安装指令如下：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> electron@<span class="token operator">&lt;</span>version<span class="token operator">></span> -D --verbose --unsafe-perm<span class="token operator">=</span>true --registry<span class="token operator">=</span><span class="token string">"https://registry.npm.taobao.org"</span> --electron-mirror<span class="token operator">=</span><span class="token string">"https://npm.taobao.org/mirrors/electron"</span> --electron-custom-dir<span class="token operator">=</span><span class="token string">"/&lt;version>"</span><span class="token comment"># 其中&lt;version>替换为你要安装的版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关Electron安装的一些事项&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://www.listener1379.top/categories/Others/"/>
    
    
      <category term="其他" scheme="http://www.listener1379.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>AES加密(3)：AES加密模式与填充</title>
    <link href="http://www.listener1379.top/Cryptography/Symmetric/aes-mode-padding/"/>
    <id>http://www.listener1379.top/Cryptography/Symmetric/aes-mode-padding/</id>
    <published>2020-04-06T01:26:00.000Z</published>
    <updated>2020-09-12T06:09:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>AES有多种加密方式和填充方式。</p><span id="more"></span><h1 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h1><p>分组密码加密方式主要有7种：ECB，CBC，CFB，OFB和CTR，这五种方式将在下面一一讲解。</p><h2 id="0-初始化向量-IV"><a href="#0-初始化向量-IV" class="headerlink" title="0. 初始化向量 / IV"></a>0. 初始化向量 / IV</h2><p>在讲加密模式之前首先得要了解一个概念：<strong>初始化向量 (IV)</strong></p><p>在除ECB以外的所有加密方式中，都需要用到IV对加密结果进行随机化。在使用同一种加密同一个密钥时不应该使用相同的IV，否则会失去一定甚至全部的安全性。如果到这里还不明白的话没关系，后面还会继续讲到。</p><h2 id="1-电子密码本-ECB"><a href="#1-电子密码本-ECB" class="headerlink" title="1. 电子密码本 / ECB"></a>1. 电子密码本 / ECB</h2><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/imgs/20200523194032.png" alt></p><p>这里$CIPH$指AES加密算法，$CIPH^{-1}$指AES解密算法。</p><p>这个很好理解：将明文简单的按照<code>128bit</code>为一个分块进行切割，把每个分块分别进行AES加密，然后再将得到的密文简单的拼接一下即可。</p><p>注意到AES加密只能加密<code>128bit</code>的分块，那问题就产生了：<strong>如果明文的长度不是128bit的倍数，就会存在一个分块不足128bit，那如何对这个分块进行加密？</strong></p><p>别慌，你想到的问题别人早就想到了。为了解决这个问题，我们发明了一种叫做<strong>填充</strong>的东西，这将会在后面具体讲解。<strong>OFB和CTR不需要填充！</strong></p><p>ECB模式有一个显著的安全问题：如果使用相同的密钥，那么相同的明文块就会生成相同的密文块，不能很好的隐藏数据模式。这听起来没什么大事，但事实上这对数据安全是一个很大的威胁，下面这张图很明显的体现出了这个问题：</p><p><img src="https://raw.github.cnpmjs.org/AI1379/imgrepo/master/blogimg/20200407105903.png" alt></p><p>因此，在密码协议中不建议使用ECB模式。</p><h2 id="2-密码块链接-CBC"><a href="#2-密码块链接-CBC" class="headerlink" title="2. 密码块链接 / CBC"></a>2. 密码块链接 / CBC</h2><p>在CBC中，每个明文块要先与前一个密文块进行异或后再加密，每个密文块都依赖于前面的所有明文块。</p><p>那么问题又来了：第一个明文块怎么办？</p><p>这个时候就要用到IV了。在CBC中，IV先与第一个明文块进行异或，得到第一个明文块，然后再进行后续的加密。详见下图：</p><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/imgs/20200523194123.png" alt></p><p>这个方法看起来很不错，但有一个缺点：加密过程是串行的，不能并行化，速度比较慢，但是解密可以并行。另外，如果密文的某一位被修改了，只会使这个密文块所对应的明文块完全改变并且改变下一个明文块的对应位，安全性仍然有一定的欠缺。</p><h2 id="3-密文反馈-CFB"><a href="#3-密文反馈-CFB" class="headerlink" title="3. 密文反馈 / CFB"></a>3. 密文反馈 / CFB</h2><p>CFB的加密跟解密过程几乎完全相同，<strong>注意它在解密过程中使用的是AES加密而不是AES解密</strong></p><p>接着我们细细来看下它的过程：</p><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/imgs/20200523194320.png" alt></p><p>CFB模式可以说是5个模式里最为特殊的一个，<strong>它不仅使用了数据块，还另外引入了一个它所独有的“数据段”的概念</strong>。在其他的加密方式中，明文和密文都是以数据块进行“打包”来加密的，而在CFB中却是以“数据段”为单位进行操作。</p><p>我们来细细看看它的过程：</p><p>首先是将输入的IV作为第一个输入块进行AES加密，得到第一个输出块<code>OUTPUT BLOCK1</code>。仔细看图，我们发现，<strong>在这个输出块中，只取了它的前s bit的数据与第一个明文段进行异或操作</strong>。因此我们可以知道：<strong>数据段的长度一定会小于等于数据块的长度</strong>。常用的数据段长度有：<code>1bit</code>, <code>8bits</code> 和<code>128bits</code>，因此CFB也分为CFB1、CFB8和CFB128，再分别跟三种AES算法组合，CFB加密总共有9种。</p><p>我们继续往下看，在<code>OUTPUT BLOCK1</code>中只取了前<code>s bits</code>与第一个明文段进行异或得到了第一个密文段，接着第一个密文段变成了第二个加密块的输入块的后<code>S bits</code>，那么问题来了：<strong>第二个块和后面的所有块的前<code>(b-s)bits</code>是从哪里来的？</strong></p><p>我们注意到，在前一个加密块得到的密文块中，舍弃掉了后<code>(b-s)bits</code>，<strong>而这<code>(b-s)bits</code>就变成了后一个加密块的输入中的前<code>(b-s)bits</code></strong>。</p><p>接下来又有一个十分反人类的问题：为什么在CFB的解密过程中使用的是加密算法而非解密算法？</p><p>这个问题看起来十分反常识，但实际上很好解释：密文段是由明文段与另一端信息进行异或得到的，那么也得要由原来的密文段异或上同样的一段信息才可以还原原来的明文段，而原来的那一段信息是由AES加密得到的，那么在解密过程中也要同样的进行加密才能算出这段内容以进行解密。</p><h2 id="4-输出反馈-OFB"><a href="#4-输出反馈-OFB" class="headerlink" title="4. 输出反馈 / OFB"></a>4. 输出反馈 / OFB</h2><p>这个很简单，跟CFB128很相似，不同的是它是直接把输出块作为下一个块加密的输入块，具体看过程：</p><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/imgs/20200523194402.png" alt></p><h2 id="5-计数器模式-CTR"><a href="#5-计数器模式-CTR" class="headerlink" title="5. 计数器模式 / CTR"></a>5. 计数器模式 / CTR</h2><p>如下图</p><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/imgs/20200523194438.png" alt></p><p><code>COUNTER</code>是整个CTR模式的核心所在。它是由IV经过一定的规则之后生成的一段数据，长度与数据块的长度相等。接着我们要选定一个数m，这个m是用于确定计数器中累加部分的大小的，通常取块大小的一半，块大小是奇数就四舍五入（当然对于AES并没有这个问题）。初始的计数器<code>COUNTER1</code>是<strong>长度固定的任意一个随机字节序列</strong>，而不是像想象中那样一段随机数后面跟着一段0。</p><p>现在我们假设块大小b=8bits,m=5bits (<strong>这里只是为了便于举例才取8bits和5bits，在AES-CTR中通常是取16bytes和8bytes</strong>)，我们用<code>*</code>表示随机值部分，初始计数器为<code>***11110</code>，那么最终计数器就是这样的：</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">***11110***11111***00000***00001***00002......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>也就是说，随机部分内容不变，其他部分每次+1，如果超出了范围就从0开始重新来。</p><blockquote><p>网上很多都是说计数器是由nonce和counter组成，nonce和counter拼接组成计数器。这种说法其实本质上还是一样的，nonce就相当于这里counter的随机数部分，只不过我这里把两个合在一块讲了。</p></blockquote><h1 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h1><p>填充有六种：NoPadding, PKCS#5, PKCS#7, ISO 10126, ANSI X9.23和ZerosPadding</p><h2 id="NoPadding"><a href="#NoPadding" class="headerlink" title="NoPadding"></a>NoPadding</h2><p>顾名思义，就是不填充。缺点就是只能加密长为128bits倍数的信息，一般不会使用</p><h2 id="PKCS-7-amp-PKCS-5"><a href="#PKCS-7-amp-PKCS-5" class="headerlink" title="PKCS#7 &amp; PKCS#5"></a>PKCS#7 &amp; PKCS#5</h2><p>缺几个字节就填几个缺的字节数。</p><p>例子：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">... | DD DD DD DD DD DD DD DD | DD DD DD DD 04 04 04 04 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>注意：如果当前数据已经是128bits的倍数了也得要填充，否则无法解密。</p><p>对于AES来说PKCS5Padding和PKCS7Padding是完全一样的，不同在于PKCS5限定了块大小为8bytes而PKCS7没有限定。因此对于AES来说两者完全相同，但是对于Rijndael就不一样了。AES是Rijndael在块大小为8bytes时的特例，对于使用其他信息块大小的Rijndael算法只能使用PKCS7</p><blockquote><p>2020.6.6更新：PKCS5的块大小是8bytes而AES的块大小是16bytes，所以实际上在AES加密中是不能使用PKCS5的，我们通常说的PKCS5和PKCS7就是同一个东西</p><p>（感谢知乎评论区提醒）</p></blockquote><h2 id="ZerosPadding"><a href="#ZerosPadding" class="headerlink" title="ZerosPadding"></a>ZerosPadding</h2><p>全部填充<code>0x00</code>，无论缺多少全部填充<code>0x00</code>，已经是128bits倍数仍要填充</p><p>例子：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">... | DD DD DD DD DD DD DD DD | DD DD DD DD 00 00 00 00 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="ISO-10126"><a href="#ISO-10126" class="headerlink" title="ISO 10126"></a>ISO 10126</h2><p>最后一个字节是填充的字节数（包括最后一字节），其他全部填随机数</p><p>例子：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">... | DD DD DD DD DD DD DD DD | DD DD DD DD 81 A6 23 04 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="ANSI-X9-23"><a href="#ANSI-X9-23" class="headerlink" title="ANSI X9.23"></a>ANSI X9.23</h2><p>跟ISO 10126很像，只不过ANSI X9.23其他字节填的都是0而不是随机数</p><p>例子：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">... | DD DD DD DD DD DD DD DD | DD DD DD DD 00 00 00 04 |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><hr><blockquote><p>参考资料：</p><p><a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf">NIST Special Publication 800-38A, 2001 Edition</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AES有多种加密方式和填充方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cryptography" scheme="http://www.listener1379.top/categories/Cryptography/"/>
    
      <category term="Symmetric" scheme="http://www.listener1379.top/categories/Cryptography/Symmetric/"/>
    
    
      <category term="加密" scheme="http://www.listener1379.top/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>AES加密(2)：GF(256)域</title>
    <link href="http://www.listener1379.top/Cryptography/Math/gf256/"/>
    <id>http://www.listener1379.top/Cryptography/Math/gf256/</id>
    <published>2020-03-31T01:49:30.000Z</published>
    <updated>2020-09-13T03:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>GF(256)域是一个有限域，在密码学中非常常用</p><span id="more"></span><h1 id="什么是有限域-伽罗瓦域-Galois-Field"><a href="#什么是有限域-伽罗瓦域-Galois-Field" class="headerlink" title="什么是有限域/伽罗瓦域(Galois Field)?"></a>什么是有限域/伽罗瓦域(Galois Field)?</h1><p>顾名思义，有限域就是<strong>含有有限个元素的域</strong>。</p><p>既然是含有有限个元素的域，那么关键点就在于<strong>有限</strong>和<strong>域</strong>两个概念。</p><p>首先我们看一下域的定义(来自<a href="https://zh.wikipedia.org/wiki/域_(數學">维基百科</a>)):</p><blockquote><p>在抽象代数中，域(Field)是一种可以进行加，减，乘，除（除了除以加法单位元“0”）运算的代数结构。域的概念是数域以及四则运算的推广。</p></blockquote><p>在这里加法和乘法并不是我们所熟悉的加法和乘法。我们把这个域记作$F$，其中加法和乘法满足以下几种特性：</p><script type="math/tex; mode=display">\begin{align}&(1)\qquad\forall a,b\in F,\ a+b\in F,\ a\cdot b\in F \\&(2)\qquad\forall a,b\in F,\ a+b=b+a,\ a\cdot b=b\cdot a \\&(3)\qquad\forall a,b,c\in F,\ (a+b)+c=a+(b+c),\ (a\cdot b)\cdot c=a\cdot (b\cdot c) \\&(4)\qquad\forall a,b,c\in F,\ a\cdot (b+c)=a\cdot b+a\cdot c \\&(5)\qquad\exists 0,1\in F,使\forall a\in F,\ a+0=a,\ a\cdot 1=a \\&(6)\qquad\forall a\in F,a\not=,\exists -a,a^{-1}使a+(-a)=0,a\cdot a^{-1}=1\end{align}</script><p>这其中(1)描述了加法与乘法的封闭性，(2),(3),(4)则是我们所熟悉的交换律、结合律和分配律，而(4),(5)分别是对单位元与逆元的定义。</p><p>看到这，我们可以很容易的发现：实数集就是一个满足域的定义的集合。确实，域的概念就是由数域推广发展而来的。</p><p>但是很显然，实数域并不是一个有限的域。</p><p>那么有限域又是怎么回事呢？</p><p>有限域显而易见也是满足域的定义的一个集合，但是这个集合却是一个有限集。在有限域上定义的加和乘仍然满足封闭性。这看起来不可能，但实际上这样的域是存在的。有限域中元素的个数叫做<strong>阶</strong>，任意有限域的阶必然是一个素数的幂。</p><h1 id="那GF-256-又是什么呢？"><a href="#那GF-256-又是什么呢？" class="headerlink" title="那GF(256)又是什么呢？"></a>那GF(256)又是什么呢？</h1><p>$GF(256)$，就是阶为256的有限域。因为$2^8=256$，所以这个域是存在的。</p><p>在$GF(256)$中的任意元素都可以表示成以下形式：</p><script type="math/tex; mode=display">b_7x^7+b_6x^6+b_5x^5+b_4x^4+b_3x^3+b_2x^2+b_1x^1+b_0</script><p>其中$b_i\in{0,1}$。比如说十六进制数<code>0x57</code>，转换为二进制之后是<code>01010111</code>，就可以表示成以下形式：</p><script type="math/tex; mode=display">x^6+x^4+x^2+x+1</script><p>接下来我们来看看$GF(256)$上的运算</p><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p>我们有两个数<code>0x57</code>和<code>0x83</code>，它们都是$GF(256)$的元素。把<code>0x57+0x83</code>用上面所述的方式表达出来，有下面的式子：</p><script type="math/tex; mode=display">(x^6+x^4+x^2+x+1)+(x^7+x+1)=x^7+x^6+x^4+x^2+2x+2</script><p>但是由于$b_i\in{0,1}$，所以结果里的每一项的系数都要模2，也就是变为他除以二的余数，得到：</p><script type="math/tex; mode=display">x^7+x^6+x^4+x^2</script><p>再将其变回16进制形式得到<code>0xd4</code>。我们把这种运算记作$a\oplus b$。</p><p>注意到<code>0x57 ^ 0x83=0xd4</code>，这里<code>^</code>指异或。所以我们可以知道$\oplus$与异或是同种运算。</p><p>这里看起来有点草率，但这是有道理的。因为异或本质上就是不带进位的二进制加法，而$\oplus$运算也一样，所以这两种确实就是同种运算。</p><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>首先我们得到$GF(2^8)$的本原多项式：</p><script type="math/tex; mode=display">m(x)=x^8+x^4+x^3+x+1</script><p>由此得到在$GF(256)$上，$x^8=x^4+x^3+x+1$ （在$GF(256)$上加法与减法是同一种运算，这是由于异或运算是自己的逆运算导致的）。</p><p>现在我们有两个数<code>0x57</code>和<code>0x83</code>，我们用多项式形式表示出来：</p><script type="math/tex; mode=display">\begin{align}(x^6+x^4+x^2+x+1)(x^7+x+1)\qquad=\qquad& x^{13}+x^{11}+x^9+x^8+x^7+ \\                                       & x^7+x^5+x^3+x^2+x+ \\                                       & x^6+x^4+x^2+x+1 \\                                =\qquad& x^{13}+x^{11}+x^9+x^8+x^6+x^5+x^4+x^3+1\end{align}</script><p>然后：</p><script type="math/tex; mode=display">(x^{13}+x^{11}+x^9+x^8+x^6+x^5+x^4+x^3+1) \bmod (x^8+x^4+x^3+x+1)=x^7+x^6+1</script><p>得到最终结果<code>0xc1</code></p><p>可以证明这种运算在$GF(256)$上满足分配律。</p><h2 id="xtime函数"><a href="#xtime函数" class="headerlink" title="xtime函数"></a>xtime函数</h2><p>我们定义函数<code>xtime</code>，其中<code>xtime(a)=a·0x02</code>，也就是说这个函数的返回值 (或者说是因变量) 是这个函数的参数 (自变量) 在$GF(256)$上与<code>0x02</code>的乘积。</p><p>那这有什么用呢？</p><p>我们又有两个数<code>0x57</code>和<code>0x13</code>，要求他们在$GF(256)$上的积</p><p>首先我们知道：</p><div class="code-wrapper"><pre class="line-numbers language-plaintext" data-language="plaintext"><code class="language-plaintext">xtime(0x57)&#x3D;0xAExtime(0xAE)&#x3D;0x47xtime(0x47)&#x3D;0x8Extime(0x8E)&#x3D;0x07<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>然后我们应用分配律有:</p><script type="math/tex; mode=display">57\cdot 13=57\cdot(01\oplus 02\oplus 10)=57\oplus AE\ \oplus 07</script><p>这样可以简化计算。</p><h2 id="GF-256-上的多项式乘法"><a href="#GF-256-上的多项式乘法" class="headerlink" title="GF(256)上的多项式乘法"></a>GF(256)上的多项式乘法</h2><p>我们现在有两个多项式如下：</p><script type="math/tex; mode=display">\begin{align}&a(x)=a_3x^3+a_2x^2+a_1x+a_0\\&b(x)=b_3x^3+b_2x^2+b_1x+b_0\\\end{align}</script><p>接着又有一个多项式$c(x)=a(x)b(x)$，于是有：</p><script type="math/tex; mode=display">\begin{align}c(x)\quad&=\quad c_6x^6+c_5x^5+c_4x^4+c_3x^3+x_2x^2+c_1x+c_0 \\c_0 \quad&=\quad a_0\cdot b_0 \\c_1 \quad&=\quad a_1\cdot b_0\oplus a_0\cdot b_1 \\c_2 \quad&=\quad a_2\cdot b_0\oplus a_1\cdot b_1\oplus a_0\cdot b_2 \\c_3 \quad&=\quad a_3\cdot b_0\oplus a_2\cdot b_1\oplus a_1\cdot b_2 \oplus a_0\cdot b_3\\c_4 \quad&=\quad a_3\cdot b_2\oplus a_2\cdot b_2\oplus a_1\cdot b_3 \\c_5 \quad&=\quad a_3\cdot b_2\oplus a_2\cdot b_3 \\c_6 \quad&=\quad a_3\cdot b_3\end{align}</script><p>我们再定义一个多项式 (这个多项式也是$GF(16)$上的本原多项式) ：</p><script type="math/tex; mode=display">M(x)=x^4+1</script><p>将$c(x)$模去$M(x)$，得到多项式$d(x)$：</p><script type="math/tex; mode=display">\begin{align}d(x)\quad&=\quad d_3x^3+d_2x^2+d_1x+d_0 \\d_0 \quad&=\quad a_0\cdot b_0\oplus a_3\cdot b_1\oplus a_2\cdot b_2\oplus a_1\cdot b_3\\d_0 \quad&=\quad a_1\cdot b_0\oplus a_0\cdot b_1\oplus a_3\cdot b_2\oplus a_2\cdot b_3\\d_0 \quad&=\quad a_2\cdot b_0\oplus a_1\cdot b_1\oplus a_0\cdot b_2\oplus a_3\cdot b_3\\d_0 \quad&=\quad a_3\cdot b_0\oplus a_2\cdot b_1\oplus a_1\cdot b_2\oplus a_0\cdot b_3\\\end{align}</script><p>同时也可以写成：</p><script type="math/tex; mode=display">\left[\begin{array}{c}d_0\\d_1\\d_2\\d_3\end{array}\right]=\left[\begin{array}{cccc}a_0\quad a_3\quad a_2 \quad a_1\\a_1\quad a_0\quad a_3 \quad a_2\\a_2\quad a_1\quad a_0 \quad a_3\\a_3\quad a_2\quad a_1 \quad a_0\end{array}\right]\left[\begin{array}{c}b_0\\b_1\\b_2\\b_3\end{array}\right]</script><p>我们把这种运算记作$\otimes$，即$a(x)\otimes b(x)=d(x)$</p><p>现在我们设$c(x)=x\otimes b(x)$，那么我们有：</p><script type="math/tex; mode=display">b(x)=b_3x^3+b_2x^2+b_1x+b_0\\c(x)=b_2x^3+b_1x^2+b_0x+b_3\\</script><p>把他们转换为二进制形式，可以看到$c$就是将$b$左环移一位得到的结果，也就是说左环移就是在$GF(256)$上乘以<code>0x01</code>。</p><h1 id="GF-256-有什么用？"><a href="#GF-256-有什么用？" class="headerlink" title="GF(256)有什么用？"></a>GF(256)有什么用？</h1><p>$GF(256)$上的四则运算是AES加密算法的数学基础，在密码学中有广泛应用。</p><hr><blockquote><p>参考资料：</p><p><a href="https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf">The Rijndeal Block Cipher</a></p><p><a href="https://zh.wikipedia.org/wiki/有限域">维基百科-有限域</a></p><p><a href="https://zh.wikipedia.org/wiki/域_(數學">维基百科-域</a>)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GF(256)域是一个有限域，在密码学中非常常用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cryptography" scheme="http://www.listener1379.top/categories/Cryptography/"/>
    
      <category term="Math" scheme="http://www.listener1379.top/categories/Cryptography/Math/"/>
    
    
      <category term="数学" scheme="http://www.listener1379.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>AES加密(1)：基本AES算法</title>
    <link href="http://www.listener1379.top/Cryptography/Symmetric/aes-encryption/"/>
    <id>http://www.listener1379.top/Cryptography/Symmetric/aes-encryption/</id>
    <published>2020-03-18T00:26:10.000Z</published>
    <updated>2020-09-12T06:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本系列长期更新，全部更新完后会同步到知乎专栏</strong></p><p>AES算法，一般指Rijndeal算法</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>AES原本指的是一套标准<a href="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf">FIPS 197</a>，而AES算法一般指分组大小为<code>128bits</code>的Rijndeal算法，由比利时学者Joan Daemen和Vincent Rijmen提出。</p><h2 id="AES与Rijndeal的区别"><a href="#AES与Rijndeal的区别" class="headerlink" title="AES与Rijndeal的区别"></a>AES与Rijndeal的区别</h2><p>AES仅指分段为128位的Rijndeal算法，两种算法对比如下：</p><p>(Nr表示循环轮数，Nb表示分组大小，Nk表示密钥长度，Nb和Nk单位都是<code>32bits</code>)</p><div class="table-container"><table><thead><tr><th>Nr</th><th>Nb=4 (AES)</th><th>Nb=6</th><th>Nb=8</th></tr></thead><tbody><tr><td><strong>Nk=4</strong></td><td>10 (AES-128)</td><td>12</td><td>14</td></tr><tr><td><strong>Nk=6</strong></td><td>12 (AES-192)</td><td>12</td><td>14</td></tr><tr><td><strong>Nk=8</strong></td><td>14 (AES-256)</td><td>14</td><td>14</td></tr></tbody></table></div><h1 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h1><h2 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h2><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/blogimgs/20200318134804.png" alt></p><blockquote><p>图片来自<a href="https://camo.githubusercontent.com/a6aaca9cba8c04fddc33e4b752af6462735268da/687474703a2f2f626c6f672e64796e6f782e636e2f77702d636f6e74656e742f75706c6f6164732f323031372f30322f4145532d466c6f772e706e67">链接</a>，这张图是AES-128的流程，AES-192和AES-256除了加密轮数和密钥长度以外都是一样的</p></blockquote><p>AES加密的整个过程是在一个4×4的字节矩阵上运作的，这个字节矩阵称作<code>state</code>。这个字节矩阵是由当前明文块处理得到的，简而言之就是把当前的16个字节按照4个字节一行排列成矩阵，比如说</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>处理后得到的矩阵就是</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>加密前要先进行<code>KeyExpansion</code>，将原始的密钥扩展得到扩展密钥，原始密钥同样要做与上面一样的变换得到矩阵才能进行运算</p><p>然后是开始加密，按照上图中顺序调用如下四个轮函数：</p><ol><li><code>AddRoundKey</code>：轮密钥加运算，将当前的</li><li><code>ByteSub</code>：字节变换 (S盒变换)</li><li><code>ShiftRows</code>：行变换</li><li><code>MixColumns</code>：列变换</li></ol><p>4个轮函数都是在伽罗瓦域$GF(256)$上进行的。伽罗瓦域 (Galois Field) 是一个满足特定规则的集合，其中元素可以进行加减乘除，且运算结果也都是这个集合的元素，具体细节可以。</p><p>接下来分析四个轮函数</p><h2 id="轮密钥加-AddRoundKey"><a href="#轮密钥加-AddRoundKey" class="headerlink" title="轮密钥加 / AddRoundKey"></a>轮密钥加 / AddRoundKey</h2><p><img src="https://raw.github.cnpmjs.org/AI1379/AI1379.github.io/imgs/blogimgs/AddRoundKey.png" alt></p><p>这个就是简单的把当前状态 (state) 与扩展密钥进行按位异或，代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes<span class="token operator">::</span><span class="token function">AddRoundKey</span><span class="token punctuation">(</span>word <span class="token operator">*</span>ExpandedKey<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">toBytes</span><span class="token punctuation">(</span>ExpandedKey<span class="token punctuation">[</span>Nb <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RoundKey <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> Nb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">toBytes</span><span class="token punctuation">(</span>ExpandedKey<span class="token punctuation">[</span>Nb <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RoundKey <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> Nb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">toBytes</span><span class="token punctuation">(</span>ExpandedKey<span class="token punctuation">[</span>Nb <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RoundKey <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> Nb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">toBytes</span><span class="token punctuation">(</span>ExpandedKey<span class="token punctuation">[</span>Nb <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> RoundKey <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> Nb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Nb <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        state<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> RoundKey<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p class="note note-warning">注意：AddRoundKey所异或的扩展密钥与当前加密轮数有关。扩展密钥是一个word数组，每个word有32bit，也就是说每个word能分解为4个byte，而异或轮密钥的时候需要把当前要异或的一组轮密钥（共4个word）分解为16个byte再进行异或。扩展密钥的长度是Nb*(Nr+1)，每次AddRoundKey需要使用当前轮数乘上Nb开始的4个word长的轮密钥。</p><h2 id="字节变换-ByteSub"><a href="#字节变换-ByteSub" class="headerlink" title="字节变换 / ByteSub"></a>字节变换 / ByteSub</h2><p>这一步就是将<code>state</code>中每一个字节替换为<code>S_box</code>中的对应字节。<code>S_box</code>是一个有256个元素的一维数组，直接查找当前字节所对应的新的字节并替换即可。</p><p><img src="https://raw.github.cnpmjs.org/AI1379/imgrepo/master/blogimgs/20200402105214.png" alt></p><p>那肯定有人会问：<code>S_box</code>是怎么来的？</p><p>很显然这个<code>S_box</code>不是随随便便来的一个数组。这是通过计算得来的，当然我们直接把他看作一个常量数组即可。</p><hr><h3 id="S-box是怎么来的？"><a href="#S-box是怎么来的？" class="headerlink" title="S_box是怎么来的？"></a>S_box是怎么来的？</h3><p class="note note-danger">本段数学内容较多，可以直接跳到下一条分割线继续阅读。</p><p>首先我们要知道什么是$GF(256)$域，具体可以参考我的<a href="http://www.listener1379.top/算法/加密/gf256/">这篇文章</a>。</p><p>(接下来默认你已经明白$GF(256)$和它上面的运算了)</p><p>首先我们求出当前字节在$GF(256)$上的乘法逆元 (相当于实数域上倒数的概念) ，如果当前字节是<code>0x00</code>则不变。我们把得到的这个数设为 $x$ 并把它以多项式的形式表示成如下形式：</p><script type="math/tex; mode=display">x_7a^7+x_6a^6+x_5a^5+x_4a^4+x_3a^3+x_2a^2+x_1a+x_0\qquad(a=2)</script><p>接着我们有一个8位二进制数 $y$ ，同样以上面的方式表示，并且满足：</p><script type="math/tex; mode=display">\left[\begin{array}{c}y_0\\y_1\\y_2\\y_3\\y_4\\y_5\\y_6\\y_7\end{array}\right]=\left[\begin{array}{cccccccc}1\quad0\quad0\quad0\quad1\quad1\quad1\quad1\\1\quad1\quad0\quad0\quad0\quad1\quad1\quad1\\1\quad1\quad1\quad0\quad0\quad0\quad1\quad1\\1\quad1\quad1\quad1\quad0\quad0\quad0\quad1\\1\quad1\quad1\quad1\quad1\quad0\quad0\quad0\\0\quad1\quad1\quad1\quad1\quad1\quad0\quad0\\0\quad0\quad1\quad1\quad1\quad1\quad1\quad0\\0\quad0\quad0\quad1\quad1\quad1\quad1\quad1\\\end{array}\right]\left[\begin{array}{c}x_0\\x_1\\x_2\\x_3\\x_4\\x_5\\x_6\\x_7\end{array}\right]+\left[\begin{array}{c}1\\1\\0\\0\\0\\1\\1\\0\end{array}\right]</script><p>这个 $y$ 就是这个字节在<code>S_box</code>中所对应的值。</p><p class="note note-warning">注意这里顺序是反的，高位在下低位在上，并且都是以2进制形式表示的</p><hr><p>附上<code>S_box</code>数组：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> byte S_Box<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7c</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0xf2</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0xc5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xd7</span><span class="token punctuation">,</span> <span class="token number">0xab</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0xf1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xc7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xe2</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xb2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0xb3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xe3</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8f</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xf5</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0xb6</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span><span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0xa7</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0x3d</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xee</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xde</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0xdb</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0xd3</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0xd5</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span> <span class="token number">0xa9</span><span class="token punctuation">,</span> <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span> <span class="token number">0xea</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0xb4</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0xdd</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x4b</span><span class="token punctuation">,</span> <span class="token number">0xbd</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x9e</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xe9</span><span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span><span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xbb</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="行变换-ShiftRow"><a href="#行变换-ShiftRow" class="headerlink" title="行变换 / ShiftRow"></a>行变换 / ShiftRow</h2><p><img src="https://raw.github.cnpmjs.org/AI1379/imgrepo/master/img/20200402125110.png" alt></p><p>这个就比较好理解了，就是把每行左环移，第一行不变，第二行环移1位，第三行环移2位，第三行环移3位，代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes<span class="token operator">::</span><span class="token function">ShiftRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nb<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            byte tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="列混合-MixColumn"><a href="#列混合-MixColumn" class="headerlink" title="列混合 / MixColumn"></a>列混合 / MixColumn</h2><p class="note note-warning">这是整个AES加密流程中最复杂的一步，同时要应用到之前在S盒变换里提到过的GF(256)域，如果真的想要理解这一步的话建议先去仔细了解一下GF(256)再来继续阅读</p><p><img src="https://raw.github.cnpmjs.org/AI1379/imgrepo/master/img/20200402134104.png" alt></p><p>我们定义一个多项式 $c(x)=’03’x^3+’01’x^2+’01’x+’02’$ ，带单引号的数表示16进制数。然后我们定义：</p><script type="math/tex; mode=display">b(x)=c(x)\otimes a(x)</script><p>或者说</p><script type="math/tex; mode=display">\left[\begin{array}{c}b_0\\b_1\\b_2\\b_3\end{array}\right]=\left[\begin{array}{cccc}02\quad03\quad01\quad01\\01\quad02\quad03\quad01\\01\quad01\quad02\quad03\\03\quad01\quad01\quad02\\\end{array}\right]\left[\begin{array}{C}a_0\\a_1\\a_2\\a_3\end{array}\right]</script><p>得到了一个新的列。</p><p>但是实际上我们很少会直接用$GF(256)$上的乘法来计算这个。由于AES的整个加密和解密过程只需要用到<code>256*6</code>个<code>GFMul</code>的值，因此我们可以直接用查表的方式加速计算。</p><p>代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes<span class="token operator">::</span><span class="token function">MixColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> byte y<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span>                        <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span>                        <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span>                        <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    byte arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token function">GFMul</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>k <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             state<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="密钥扩展-KeyExpansion"><a href="#密钥扩展-KeyExpansion" class="headerlink" title="密钥扩展 / KeyExpansion"></a>密钥扩展 / KeyExpansion</h2><p>万事俱备，只欠东风。4个轮函数已经全部齐了，现在只差一步——密钥扩展。</p><p><img src="https://raw.github.cnpmjs.org/AI1379/imgrepo/master/img/20200405091020.png" alt></p><p>扩展密钥是一个长为<code>Nb*(Nr+1)</code>的<code>word</code>数组，一个<code>word</code>相当于8个<code>byte</code>。对于AES-128和AES-192，代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes128<span class="token operator">::</span><span class="token function">KeyExpansion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nk<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toWord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Nk<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nb <span class="token operator">*</span> <span class="token punctuation">(</span>Nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> temp <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> Nk <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> <span class="token function">SubByte</span><span class="token punctuation">(</span><span class="token function">RotByte</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> Rcon<span class="token punctuation">[</span>i <span class="token operator">/</span> Nk<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> Nk<span class="token punctuation">]</span> <span class="token operator">^</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>而对于AES-256则多了一步：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes256<span class="token operator">::</span><span class="token function">KeyExpansion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nk<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toWord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Nk<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nb <span class="token operator">*</span> <span class="token punctuation">(</span>Nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> temp <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> Nk <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> <span class="token function">SubByte</span><span class="token punctuation">(</span><span class="token function">RotByte</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> Rcon<span class="token punctuation">[</span>i <span class="token operator">/</span> Nk<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> Nk <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> <span class="token function">SubByte</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> Nk<span class="token punctuation">]</span> <span class="token operator">^</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>其中出现了几个东西：<code>RotByte</code>，<code>SubByte</code>和<code>Rcon</code>。</p><h3 id="RotByte"><a href="#RotByte" class="headerlink" title="RotByte"></a>RotByte</h3><p><code>RotByte</code>函数是将这个<code>word</code>中的四个<code>byte</code>左环移一位，代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">word aes<span class="token operator">::</span><span class="token function">RotByte</span><span class="token punctuation">(</span>crypto<span class="token operator">::</span>word in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    word res<span class="token punctuation">;</span>    byte arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">toBytes</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token function">toWord</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这个比较好理解，就不多说了。</p><h3 id="SubByte"><a href="#SubByte" class="headerlink" title="SubByte"></a>SubByte</h3><p><code>SubByte</code>是对这个<code>word</code>里的每一个<code>byte</code>进行S盒变换，代码也很简单：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">word aes<span class="token operator">::</span><span class="token function">SubByte</span><span class="token punctuation">(</span>crypto<span class="token operator">::</span>word in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    word res<span class="token punctuation">;</span>    byte arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">toBytes</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token function">toWord</span><span class="token punctuation">(</span>S_Box<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S_Box<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S_Box<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> S_Box<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Rcon"><a href="#Rcon" class="headerlink" title="Rcon"></a>Rcon</h3><p>这个就比较复杂了，仍然要用到$GF(256)$相关内容（当然我们也可以把它看作常数数组）</p><p>首先我们有一个数组<code>RC</code>，其中：</p><script type="math/tex; mode=display">RC[1]=1\\RC[i]=2^{(i-1)}</script><p>这里的所有运算都是在$GF(256)$上进行的。</p><p>而<code>Rcon[i]=toWord(Rc[i],0x00,0x00,0x00)</code>。</p><p>整个数组如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> word Rcon<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x01000000</span><span class="token punctuation">,</span> <span class="token number">0x02000000</span><span class="token punctuation">,</span> <span class="token number">0x04000000</span><span class="token punctuation">,</span>                       <span class="token number">0x08000000</span><span class="token punctuation">,</span> <span class="token number">0x10000000</span><span class="token punctuation">,</span> <span class="token number">0x20000000</span><span class="token punctuation">,</span> <span class="token number">0x40000000</span><span class="token punctuation">,</span>                       <span class="token number">0x80000000</span><span class="token punctuation">,</span> <span class="token number">0x1b000000</span><span class="token punctuation">,</span> <span class="token number">0x36000000</span><span class="token punctuation">,</span> <span class="token number">0x6c000000</span><span class="token punctuation">,</span>                       <span class="token number">0xd8000000</span><span class="token punctuation">,</span> <span class="token number">0xab000000</span><span class="token punctuation">,</span> <span class="token number">0xed000000</span><span class="token punctuation">,</span> <span class="token number">0x9a000000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><p>解密过程与加密过程刚好相反。这里只放几个关键数据：</p><h2 id="逆S盒"><a href="#逆S盒" class="headerlink" title="逆S盒"></a>逆S盒</h2><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> byte Inv_S_Box<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0xd5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9e</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0xd7</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span>    <span class="token number">0x7c</span><span class="token punctuation">,</span> <span class="token number">0xe3</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0xde</span><span class="token punctuation">,</span> <span class="token number">0xe9</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span>    <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x3d</span><span class="token punctuation">,</span> <span class="token number">0xee</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span>    <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0xb2</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span>    <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xb6</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span>    <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xa7</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>    <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0xab</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0xd3</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0xb3</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>    <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x8f</span><span class="token punctuation">,</span> <span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0xbd</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span>    <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xea</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xf2</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0xb4</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>    <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xe2</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span>    <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xf1</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xc5</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0x4b</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span> <span class="token number">0xdb</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span>    <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0xdd</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xc7</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span>    <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0xa9</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span>    <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0xf5</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0xbb</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span>    <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="逆列变换"><a href="#逆列变换" class="headerlink" title="逆列变换"></a>逆列变换</h2><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes<span class="token operator">::</span><span class="token function">InvMixColumn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> byte y<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span>                        <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span>                        <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span>                        <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    byte arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nb<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token function">GFMul</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>k <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="逆行变换"><a href="#逆行变换" class="headerlink" title="逆行变换"></a>逆行变换</h2><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> aes<span class="token operator">::</span><span class="token function">InvShiftRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Nb<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Nb <span class="token operator">-</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            byte tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            state<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="轮密钥加和密钥扩展"><a href="#轮密钥加和密钥扩展" class="headerlink" title="轮密钥加和密钥扩展"></a>轮密钥加和密钥扩展</h2><p>加密和解密过程中轮密钥加和密钥扩展是完全一样的，不需要另外写新的代码。</p><hr><blockquote><p>参考资料：</p><p><a href="https://github.com/matt-wu/AES">matt-wu: AES</a></p><p><a href="https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf">The Rijndeal Block Cipher</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本系列长期更新，全部更新完后会同步到知乎专栏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AES算法，一般指Rijndeal算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cryptography" scheme="http://www.listener1379.top/categories/Cryptography/"/>
    
      <category term="Symmetric" scheme="http://www.listener1379.top/categories/Cryptography/Symmetric/"/>
    
    
      <category term="加密" scheme="http://www.listener1379.top/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>MD5算法解析</title>
    <link href="http://www.listener1379.top/Cryptography/Hash/md5/"/>
    <id>http://www.listener1379.top/Cryptography/Hash/md5/</id>
    <published>2020-02-20T13:14:00.000Z</published>
    <updated>2020-09-12T06:10:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>MD5即Message-Digest Algorithm 5, 信息学中使用广泛的哈希算法</p><span id="more"></span><h1 id="MD5简介"><a href="#MD5简介" class="headerlink" title="MD5简介"></a>MD5简介</h1><p><strong>MD5</strong>即Message-Digest Algorithm 5, 信息学中使用广泛的哈希算法</p><p>这个算法具有很多性质:</p><ol><li>压缩性: 对于任意长度的输入, 输出长度总是相同的</li><li>容易计算: <strong>线性时间复杂度</strong></li><li>抗修改性: 对原数据的一点点修改都会导致最终结果的巨大变化</li><li>抗碰撞性: 已知原数据和MD5值很难生成与原数据不同但MD5值相同的数据</li></ol><p>MD5可以生成任意一个文件的“数字指纹”，对文件的微小改动都会直接导致数字指纹的巨大变化。</p><blockquote><p>注：MD5加密中文需要使用UTF-8编码，但Windows下默认是GBK编码，两种编码得到的结果是不一样的</p></blockquote><h1 id="加密步骤"><a href="#加密步骤" class="headerlink" title="加密步骤"></a>加密步骤</h1><h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><p>MD5中，首先要对信息进行填充，先填充一个1，后面都填充0，使得信息的长度 $len \equiv 448 \pmod{512}$ ，即 $len\bmod 512 = 448$。为什么要求模出来是448呢？因为448=512-64，而填充完后后面还要再填上64位的原数据长度，如果超出64位则填充原数据长度的后64位，这样可以使得最终的数据长度为512的整数倍，才可以满足后面继续加密的需要。</p><h2 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h2><p>初始化4个128位链接变量如下:</p><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">A &#x3D; 0x67452301B &#x3D; 0xEFCDAB89C &#x3D; 0x98BADCFED &#x3D; 0x10325476<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h2><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>将原始数据每512bits为一个分组 (这就是前面要求填充到512整数倍的原因)，对每组分别进行处理</p><h3 id="处理每个分组的数据"><a href="#处理每个分组的数据" class="headerlink" title="处理每个分组的数据"></a>处理每个分组的数据</h3><p>每个分组有四个变量$a,b,c,d$，第一分组的$a,b,c,d$分别为上面所写了的4个16进制数，此后每一个分组的这四个变量都是上一个分组计算的结果。</p><p>现在定义四个非线性函数 (逻辑运算) :</p><script type="math/tex; mode=display">\begin{align}&F(x,y,z)=(x\land y)\lor((\neg x)\land z)\\&G(x,y,z)=(x\land y)\lor(y\land(\neg z))\\&H(x,y,z)=x\oplus y\oplus z\\&I(x,y,z)=y\oplus (x\lor (\neg z))\end{align}</script><p>其中$\land$表示按位与，$\lor$表示按位或，$\neg$表示按位非，$\oplus$表示按位异或</p><p>接下来，我们设$M_j$为这一组信息的第$j$个子分组 ($0\le j\le 15$) ，$t_j$为$2^{32}\cdot |\sin{i}|\ \ (1\le i\le 64)$的整数部分，$i$是整数，单位是弧度($2^{32}=4294967296$)</p><p>现在定义四个操作:</p><script type="math/tex; mode=display">\begin{align}&FF(a,b,c,d,M_j,s,t_i):\quad a=b+((a+F(b,c,d)+M_j+t_i)<<s) \\&GG(a,b,c,d,M_j,s,t_i):\quad a=b+((a+G(b,c,d)+M_j+t_i)<<s) \\&HH(a,b,c,d,M_j,s,t_i):\quad a=b+((a+H(b,c,d)+M_j+t_i)<<s) \\&II(a,b,c,d,M_j,s,t_i):\quad a=b+((a+I(b,c,d)+M_j+t_i)<<s) \\\end{align}</script><p><strong>注意：&lt;&lt;在这里是左环移而不是一般的左移！！！</strong></p><blockquote><p>左环移和左移的区别：</p><p>现有一个二进制数11010010，左环移三位后是10010110，而左移三位后是10010000</p></blockquote><p>接下来就可以操作了，共4轮循环，每轮16次，伪代码如下：</p><script type="math/tex; mode=display">\begin{align}&for\ i\ \leftarrow\ 0\ to\ 4:\\&\qquad for\ j\ \leftarrow\ 0\ to\ 16:\\&\qquad\qquad func_i(a_{(j+3)\bmod 4},a_{(j+2)\bmod 4},a_{(j+1)\bmod 4},a_{j\bmod 4},M_j,s_{i,j\bmod 4},t_{16i+j})\end{align}</script><p>其中:</p><script type="math/tex; mode=display">func_0:\quad FF\\func_1:\quad GG\\func_2:\quad HH\\func_3:\quad II\ \ \ \</script><p>$s<em>{i,j\bmod 4}$为常数数组，具体数值见下面代码里的s数组，$M_j$和$t</em>{16i-j}$上文已经讲过了</p><p>最后把$a,b,c,d$分别加上$A,B,C,D$</p><p>然后进行下一组运算</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出数据为$a,b,c,d$的级联</p><h1 id="代码-C"><a href="#代码-C" class="headerlink" title="代码(C++)"></a>代码(C++)</h1><p>编译指令：<code>g++ MD5.cpp -o md5.exe -Wall -Wextra</code></p><p>MD5.hpp:</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CSTRING</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// !CSTRING</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MD5_HPP</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MD5_HPP</span></span><span class="token comment">//----------------------------------------宏定义----------------------------------------</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">F_MD5</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>x <span class="token operator">&amp;</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">G_MD5</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> z<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token operator">~</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">H_MD5</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> y <span class="token operator">^</span> z<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">I_MD5</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">(</span>y <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">|</span> <span class="token operator">~</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ROTATE_LEFT_MD5</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FF_MD5</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">ROTATE_LEFT_MD5</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">F_MD5</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GG_MD5</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">ROTATE_LEFT_MD5</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">G_MD5</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HH_MD5</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">ROTATE_LEFT_MD5</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">H_MD5</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">II_MD5</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">ROTATE_LEFT_MD5</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">I_MD5</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> m <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">//----------------------------------------MD5结构体定义----------------------------------------</span><span class="token keyword">struct</span> <span class="token class-name">MD5_CTX</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//加密结果</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//----------------------------------------常量定义----------------------------------------</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0xd76aa478</span><span class="token punctuation">,</span> <span class="token number">0xe8c7b756</span><span class="token punctuation">,</span> <span class="token number">0x242070db</span><span class="token punctuation">,</span> <span class="token number">0xc1bdceee</span><span class="token punctuation">,</span> <span class="token number">0xf57c0faf</span><span class="token punctuation">,</span> <span class="token number">0x4787c62a</span><span class="token punctuation">,</span> <span class="token number">0xa8304613</span><span class="token punctuation">,</span> <span class="token number">0xfd469501</span><span class="token punctuation">,</span>    <span class="token number">0x698098d8</span><span class="token punctuation">,</span> <span class="token number">0x8b44f7af</span><span class="token punctuation">,</span> <span class="token number">0xffff5bb1</span><span class="token punctuation">,</span> <span class="token number">0x895cd7be</span><span class="token punctuation">,</span> <span class="token number">0x6b901122</span><span class="token punctuation">,</span> <span class="token number">0xfd987193</span><span class="token punctuation">,</span> <span class="token number">0xa679438e</span><span class="token punctuation">,</span> <span class="token number">0x49b40821</span><span class="token punctuation">,</span>    <span class="token number">0xf61e2562</span><span class="token punctuation">,</span> <span class="token number">0xc040b340</span><span class="token punctuation">,</span> <span class="token number">0x265e5a51</span><span class="token punctuation">,</span> <span class="token number">0xe9b6c7aa</span><span class="token punctuation">,</span> <span class="token number">0xd62f105d</span><span class="token punctuation">,</span> <span class="token number">0x2441453</span><span class="token punctuation">,</span> <span class="token number">0xd8a1e681</span><span class="token punctuation">,</span> <span class="token number">0xe7d3fbc8</span><span class="token punctuation">,</span>    <span class="token number">0x21e1cde6</span><span class="token punctuation">,</span> <span class="token number">0xc33707d6</span><span class="token punctuation">,</span> <span class="token number">0xf4d50d87</span><span class="token punctuation">,</span> <span class="token number">0x455a14ed</span><span class="token punctuation">,</span> <span class="token number">0xa9e3e905</span><span class="token punctuation">,</span> <span class="token number">0xfcefa3f8</span><span class="token punctuation">,</span> <span class="token number">0x676f02d9</span><span class="token punctuation">,</span> <span class="token number">0x8d2a4c8a</span><span class="token punctuation">,</span>    <span class="token number">0xfffa3942</span><span class="token punctuation">,</span> <span class="token number">0x8771f681</span><span class="token punctuation">,</span> <span class="token number">0x6d9d6122</span><span class="token punctuation">,</span> <span class="token number">0xfde5380c</span><span class="token punctuation">,</span> <span class="token number">0xa4beea44</span><span class="token punctuation">,</span> <span class="token number">0x4bdecfa9</span><span class="token punctuation">,</span> <span class="token number">0xf6bb4b60</span><span class="token punctuation">,</span> <span class="token number">0xbebfbc70</span><span class="token punctuation">,</span>    <span class="token number">0x289b7ec6</span><span class="token punctuation">,</span> <span class="token number">0xeaa127fa</span><span class="token punctuation">,</span> <span class="token number">0xd4ef3085</span><span class="token punctuation">,</span> <span class="token number">0x4881d05</span><span class="token punctuation">,</span> <span class="token number">0xd9d4d039</span><span class="token punctuation">,</span> <span class="token number">0xe6db99e5</span><span class="token punctuation">,</span> <span class="token number">0x1fa27cf8</span><span class="token punctuation">,</span> <span class="token number">0xc4ac5665</span><span class="token punctuation">,</span>    <span class="token number">0xf4292244</span><span class="token punctuation">,</span> <span class="token number">0x432aff97</span><span class="token punctuation">,</span> <span class="token number">0xab9423a7</span><span class="token punctuation">,</span> <span class="token number">0xfc93a039</span><span class="token punctuation">,</span> <span class="token number">0x655b59c3</span><span class="token punctuation">,</span> <span class="token number">0x8f0ccc92</span><span class="token punctuation">,</span> <span class="token number">0xffeff47d</span><span class="token punctuation">,</span> <span class="token number">0x85845dd1</span><span class="token punctuation">,</span>    <span class="token number">0x6fa87e4f</span><span class="token punctuation">,</span> <span class="token number">0xfe2ce6e0</span><span class="token punctuation">,</span> <span class="token number">0xa3014314</span><span class="token punctuation">,</span> <span class="token number">0x4e0811a1</span><span class="token punctuation">,</span> <span class="token number">0xf7537e82</span><span class="token punctuation">,</span> <span class="token number">0xbd3af235</span><span class="token punctuation">,</span> <span class="token number">0x2ad7d2bb</span><span class="token punctuation">,</span> <span class="token number">0xeb86d391</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> PADDING<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//----------------------------------------函数预定义----------------------------------------</span><span class="token keyword">void</span> <span class="token function">MD5Init</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Update</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> inputlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Final</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> digest<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Transform</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> block<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Encode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MD5Decode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//----------------------------------------主函数----------------------------------------</span><span class="token keyword">void</span> <span class="token function">MD5Init</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x67452301</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xEFCDAB89</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x98BADCFE</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x10325476</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MD5Update</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> inputlen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//context: 已初始化的结构体</span>    <span class="token comment">//input: 需加密的信息</span>    <span class="token comment">//inputlen: 需加密的信息的长度</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> partlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">;</span>    partlen <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">-</span> index<span class="token punctuation">;</span>    context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> inputlen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>inputlen <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> inputlen <span class="token operator">>></span> <span class="token number">29</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputlen <span class="token operator">>=</span> partlen<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token operator">-></span>buffer<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> partlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">MD5Transform</span><span class="token punctuation">(</span>context<span class="token operator">-></span>state<span class="token punctuation">,</span> context<span class="token operator">-></span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> partlen<span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">&lt;=</span> inputlen<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">64</span><span class="token punctuation">)</span>            <span class="token function">MD5Transform</span><span class="token punctuation">(</span>context<span class="token operator">-></span>state<span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>context<span class="token operator">-></span>buffer<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> inputlen <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MD5Final</span><span class="token punctuation">(</span>MD5_CTX <span class="token operator">*</span>context<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> digest<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//context: 加密好的 MD5结构体</span>    <span class="token comment">//digest: 最终保存位置</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> padlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> bits<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    index <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">-></span>count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">;</span>    padlen <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">56</span> <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">120</span> <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MD5Encode</span><span class="token punctuation">(</span>bits<span class="token punctuation">,</span> context<span class="token operator">-></span>count<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MD5Update</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> PADDING<span class="token punctuation">,</span> padlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MD5Update</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> bits<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MD5Encode</span><span class="token punctuation">(</span>digest<span class="token punctuation">,</span> context<span class="token operator">-></span>state<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MD5Encode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        output<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MD5Decode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>output<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span>                    <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span>                    <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span>                    <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MD5Transform</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> state<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> block<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//state: MD5结构体里的 state数组</span>    <span class="token comment">//block: 要加密的 512bits数据块</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//注意一下，这里 a[0],a[1],a[2],a[3]分别代表 d,c,b,a, 顺序是反的, 方便后面操作</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> kinit<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//k的初始值</span>    <span class="token function">MD5Decode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        k <span class="token operator">=</span> kinit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token function">FF_MD5</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">GG_MD5</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token function">HH_MD5</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token function">II_MD5</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       x<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    state<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MD5</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> digest<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//最终的加密函数</span><span class="token punctuation">&#123;</span>    MD5_CTX MD5<span class="token punctuation">;</span>    <span class="token function">MD5Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MD5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MD5Update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MD5<span class="token punctuation">,</span> input<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MD5Final</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MD5<span class="token punctuation">,</span> digest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token operator">::</span>string <span class="token function">MD5string</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string input<span class="token punctuation">)</span> <span class="token comment">//对输入的 std::string进行 MD5加密并返回 std::string</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> digest<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string res<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">MD5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> digest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"%02x"</span><span class="token punctuation">,</span> digest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// !MD5_HPP</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>MD5.cpp:</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MD5.hpp"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">,</span> res<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> decryption<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token function">MD5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> decryption<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token function">MD5string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> decryption<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>生成t数组的Python代码(C++的cmath库是真的弱)</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%#x"</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">*</span>math<span class="token punctuation">.</span>fabs<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/37257569">https://zhuanlan.zhihu.com/p/37257569</a></p><p><a href="https://www.cnblogs.com/foxclever/p/7668369.html">https://www.cnblogs.com/foxclever/p/7668369.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MD5即Message-Digest Algorithm 5, 信息学中使用广泛的哈希算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cryptography" scheme="http://www.listener1379.top/categories/Cryptography/"/>
    
      <category term="Hash" scheme="http://www.listener1379.top/categories/Cryptography/Hash/"/>
    
    
      <category term="加密" scheme="http://www.listener1379.top/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1216八皇后题解</title>
    <link href="http://www.listener1379.top/Algorithm/DFS/P1219/"/>
    <id>http://www.listener1379.top/Algorithm/DFS/P1219/</id>
    <published>2019-01-11T16:00:00.000Z</published>
    <updated>2020-07-04T14:11:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1219">题目链接</a></p><p><strong>极为经典的DFS练习题</strong></p><p>首先我们需要一个数组<code>vis[15][15]</code>用来标记棋盘上哪些点不能放皇后。”显而易见”的这是个<code>bool</code>数组(加引号的原因后面再说)</p><p>其次我们还需要一个数组<code>ans[15]</code>来存储当前答案，然后再用sum表示解的总个数</p><p>然后读入，初始化(vis数组全部设为0)，然后就开始DFS:</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> dep<span class="token punctuation">)</span> <span class="token comment">//dep表示当前所在行</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//输出</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//回溯</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//标记</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> dep<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>别抄这段代码！</strong><br><strong>它是错的！！！</strong></p><p>那我们来看看哪里错了。</p><p>首先我们发现第一个if语句应该放到循环里面的if语句里面并且去掉<code>return;</code>，否则可能会漏解。</p><p>其次两个<code>memset</code>也是不对的。因为我们答案在存入<code>ans</code>数组的时候是会覆盖原有数据的，所以<code>memset(ans,0,sizeof(ans));</code>一句可以直接删去，回溯查找下一个分支的时候直接覆盖存储，但把<code>vis</code>数组恢复到当前状态的前一个状态有点麻烦。</p><p>首先很容易就可以想到，可以将<code>memset(vis,0,sizeof(vis))</code>一句改为如下代码:</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> dep<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>好像可以！</p><p>但如果细想的话还是不行，因为当你这么赋值了之后，一些原来的数据就被破坏掉了。</p><p>就比如说我们在6*6的棋盘中，点(1,3)上和点(5,2)上各有一个皇后。那么我们看一看(6,3)这个点：显而易见的在(1,3)的皇后可以威胁到(6,3)这个点，但当我们回溯到(5,2)时就会把(6,3)的这个值设为<code>false</code>，即这个点是安全的，但实际上不是。</p><p>那怎么办呢？我们可以把<code>vis</code>定义为一个三维<code>bool</code>数组来存储当前情况下每多放一个皇后后棋盘上的情况，但这样实现起来太复杂了而且容易错。</p><p>所以怎么解决这个问题呢？问题出在之前的”显而易见”上。</p><p>如果把<code>vis</code>定义为一个int数组来表示能威胁到这个点的皇后的个数，那么这事就好办了：搜索时每多放一个皇后把新增的格子++，回溯的时候- -就行了。同时因为我们是一行一行往下搜索的，所以横排的可以不用处理，其他三个方向只要从当前位置往下走就行了，可以略微优化一下。</p><p>因此完整代码如下<br><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> dep<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>dep<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>dep<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> dep<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dep <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>dep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> dep<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> dep <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>vis<span class="token punctuation">[</span>dep <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1219&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;极为经典的DFS练习题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我们需要一个数组&lt;code&gt;vis[15][15]&lt;/code&gt;用来
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.listener1379.top/categories/Algorithm/"/>
    
      <category term="DFS" scheme="http://www.listener1379.top/categories/Algorithm/DFS/"/>
    
    
      <category term="DFS" scheme="http://www.listener1379.top/tags/DFS/"/>
    
      <category term="题解" scheme="http://www.listener1379.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P2347砝码称重题解</title>
    <link href="http://www.listener1379.top/Algorithm/DFS/P2347/"/>
    <id>http://www.listener1379.top/Algorithm/DFS/P2347/</id>
    <published>2019-01-11T16:00:00.000Z</published>
    <updated>2020-09-12T06:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>题干：</p><p>设有1g,2g,3g,5g,10g,20g的砝码各若干枚（其总重≤1000），<br>求用他们所能称出的不同重量的个数（不包括0g）</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P2347">题目链接</a></p><p>显而易见的这是一道动态规划题。有人说是背包，但因为我没看出来，所以我就用了自己的方法，这里讲一下自己的思路。</p><p>首先我们注意到题目条件里的总重小于等于1000，而且各个砝码质量也是一定的。我们用$f_{i,j}$来表示只使用最小的$i$个砝码能否称出$jg$质量，能则为<code>true</code>,否则为<code>false</code>.</p><p>事情现在变得简单多了，因为我们现在已经有了如下这个双重循环的框架：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存储每种砝码数量</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//读入</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//一段代码</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>接下来所要做的就是往里面填东西。</p><p>那怎么填呢？</p><p>首先我们可以知道，对于每个$i\in{x\in\mathbb{N}<em>+|x\in [1,6]},\  j\in{x\in\mathbb{N}</em>+|x\in [1,a<em>i]}$，总有$f</em>{i,j\cdot w_i}=true$,所以我们可以得到更新后的代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>但是很显然这样会少情况，比如说题目给的样例中，$1g+2g$的情况就会少掉，那怎么办呢？我的想法是再加一重循环，每次都把$i-1$行扫一遍，遇到值是<code>true</code>的就将此时的质量与之前的$j\cdot w_i$相加得到的新质量也赋为<code>true</code>,得到如下代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>最后输出：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Total="</span><span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>但这样太慢了，虽然我没有想到把$n^3$优化到$n^2$的方法，但在输出和第三重循环还可以有小幅优化。</p><p>定义$maxf<em>i$表示用最小的$i$种砝码所能称出的最大质量，那么很显然$maxf_i=max</em>{i-1}+a_i\cdot w_i$,于是第三重循环里<code>k&lt;=1000</code>可以改为<code>k&lt;=maxf[i-1]</code></p><p>另外对于输出，我们可以发现如果每次更新下一行时先把前一行复制下来，最后输出只要一重循环；同时我们又发现，在中间的第二重循环中，若$j$从0开始循环，就可以起到上面说的复制下来的效果，于是我们可以得到最终的代码：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxf<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>maxf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>maxf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>maxf<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> maxf<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Total="</span> <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题干：&lt;/p&gt;
&lt;p&gt;设有1g,2g,3g,5g,10g,20g的砝码各若干枚（其总重≤1000），&lt;br&gt;求用他们所能称出的不同重量的个数（不包括0g）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.listener1379.top/categories/Algorithm/"/>
    
      <category term="DFS" scheme="http://www.listener1379.top/categories/Algorithm/DFS/"/>
    
    
      <category term="DFS" scheme="http://www.listener1379.top/tags/DFS/"/>
    
      <category term="题解" scheme="http://www.listener1379.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
</feed>
